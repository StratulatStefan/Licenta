{"version":3,"sources":["services/GeneralPurposeService.js","environment.js","services/HTTPResponseHandler.js","services/UsersHandlerService.js","pages/StartPage.js","pages/ProfilePage.js","services/FileHandlerService.js","pages/MainUserPage.js","services/AdminHandlerService.js","pages/AdminMainPage.js","pages/UploadPage.js","pages/FileDetailsPage.js","index.js"],"names":["GeneralPurposeService","getFileSizeUnit","filesize","index","Math","round","getCurrentTimestamp","currentdate","day","getDate","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","getCurrentTimestampForLogging","limit","Date","time","split","includes","parseInt","getFileExtension","filename","tokens","length","getFileType","extension","setHeaderLayout","usertype","adminItems","userItems","concat","forEach","redirector","document","getElementById","style","display","prepareURLQuery","logCriteria","options","node_address","push","message_type","join","sanitizeURL","content","replace","Environment","rest_api","frontend_proxy","available_logos","getWebSocket","Promise","resolve","webSocketConnection","Client","brokerURL","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","console","log","onDisconnect","activate","HTTPResponseHandler","handleErrorStatus","response","response_status","status","status_code","json","then","alert","UsersHandlerService","basicCredentialsCheck","credentials","forbiddens","Exception","Object","keys","credential_key","character","e","getAdditionalUserData","jwt","fetch","method","mode","headers","ok","code","message","getUserRole","getAvailableUserTypes","login","credentialsCheckStatus","userdata","body","JSON","stringify","register","updatePlan","newplan","StartPage","props","componentDidMount","fetchAvailableUserTypes","checkForConnectedUser","fetchUserType","componentDidUpdate","state","accountAvailable","accountSuccessfullyCreated","innerHTML","setState","isUserConnected","userType","redirect","userData","localStorage","getItem","parse","visibility","availableUserTypes","setItem","accountCredentials","color","createAccount","destination","history","email","password","userypesoptions","value","className","id","src","alt","this","onChange","event","target","type","onClick","name","country","Component","ProfilePage","userDetailsCategories","category","borderBottom","userDetailsCategory","additionalUserData","fetchAdditionalUserData","utype","userDetails","generalData","total_storage","available_storage","used_storage","businessPlans","href","FileHandlerService","uploadFile","file","description","url","additional_user_data","formData","FormData","append","storage_quantity","getUserFiles","getFileHistory","deleteFile","renameFile","newname","downloadFile","MainUserPage","_","fetchUserFiles","location","detail","userFiles","param","currentFileName","availableNodes","fileDetails","userFile","logosrc","fontSize","textDecoration","version","version_description","hash","toString","width","AdminHandlerService","fetchLog","fetchAvailableNodesFromAPI","cleanLog","fetchNodesStoringFile","userId","fetchNodeData","nodeAddress","getFileVersions","userid","deleteFileFromInternalNode","user","address","AdminMainPage","usertype_result","undefined","fetchAvailableNodes","error_status","adminAction","websocket","menu_selection","handleContentTable","fetchFileVersions","file_versions","handleReplicationManagerStatus","replication_status","handleConnectionTable","nodes_details","connectionTable","current_address","handleNodesActivity","addresses","handleStorageStatus","storage_status","first_address","nodesAddresses","node_registers","storagestatus","actionName","view","connected","subscriptions","unsubscribe","current_topic","handleFunction","fetchLogByCriteriaUpdate","topic","func","subscribe","msg","criteria","updatevalue","fetchReplicationNodesForFile","content_nodes_data","content_nodes","selectedFile","date1","onclick","replicationNodesForFile","versionForFile","availableNodesSelect","logData","storagestatus_nodes","files","additional_data","nodes_status","node","log_register","register_date","registerId","content_register","versionNo","onMouseOver","onMouseLeave","crc","fileSize","replication_factor","version_no","version_desc","version_hash","ip_address","location_country","marginTop","indexOfAddress","indexOf","another_nodes","nodesVersions","nodesCRCs","warnings","errors","filter","percent","ceil","height","data","title","marginBottom","maxHeight","maxWidth","UploadPage","dragDropStyle","div_name","dropArea","addEventListener","preventDefault","borderStyle","handleDropFiles","dataTransfer","size","lastModifiedDate","fileType","preview","URL","createObjectURL","currentFile","descriptionData","placeholder","FileDetailsPage","currentSelectedAction","userActions","action","fileSuccessfullyDownloaded","click","filePreview","global_count","handler","interval","setInterval","clearInterval","fileDetailsAfterRename","newFileName","setTimeout","updateAction","actionIndex","version_timestamp","textAlign","download","padding","paddingLeft","paddingRight","ReactDOM","render","exact","path","component"],"mappings":"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","file":"static/js/main.248708fc.chunk.js","sourcesContent":["export class GeneralPurposeService{\r\n    static getFileSizeUnit = (filesize) => {\r\n        let units = ['', 'K', 'M', 'G']\r\n        let index = 0;\r\n        while(true){\r\n            if(filesize / 1024 >= 1){\r\n                filesize = filesize / 1024;\r\n                index = index + 1;\r\n            }\r\n            else{\r\n                break\r\n            }\r\n        }\r\n        return Math.round(filesize * 10000) / 10000 + \" \" + units[index] + \"B\"\r\n    }\r\n\r\n    static getCurrentTimestamp = (currentdate) => {\r\n        let day     = currentdate.getDate()\r\n        let month   = currentdate.getMonth()\r\n        let year    = currentdate.getFullYear()\r\n        let hours   = currentdate.getHours()\r\n        let minutes = currentdate.getMinutes()\r\n        return (day < 10 ? \"0\" + day : day) + \"/\"\r\n            + (month < 10 ? \"0\" + (month + 1) : (month + 1))  + \"/\" \r\n            + year + \" \"  \r\n            + (hours < 10 ? \"0\" + hours : hours) + \":\"  \r\n            + (minutes < 10 ? \"0\" + minutes : minutes)\r\n    }\r\n\r\n    static getCurrentTimestampForLogging = (limit) => {\r\n        let currentdate = new Date()\r\n        let year = currentdate.getFullYear()\r\n        let month = currentdate.getMonth() + 1\r\n        let day = currentdate.getDate()\r\n        let hours = currentdate.getHours()\r\n        let minutes = currentdate.getMinutes()\r\n        let time = limit.split(\" \")\r\n        if(time[1].includes(\"minute\")){\r\n            minutes -= parseInt(time[0])\r\n        }\r\n        else if(time[1].includes(\"hour\")){\r\n            hours -= parseInt(time[0])\r\n        }\r\n        else if(time[1].includes(\"day\")){\r\n            day -= parseInt(time[0])\r\n        }\r\n        else if(time[1].includes(\"week\")){\r\n            day -= parseInt(time[0]) * 7\r\n        }\r\n        else if(time[1].includes(\"month\")){\r\n            month -= parseInt(time[0])\r\n        }\r\n        else if(time[1].includes(\"year\")){\r\n            year -= parseInt(time[0])\r\n        }\r\n\r\n        return  `${year}-${month}-${day}%20${hours}:${minutes}`\r\n    }\r\n\r\n    static getFileExtension = (filename) => {\r\n        let tokens = filename.split(\".\")\r\n        return tokens[tokens.length - 1];\r\n    }\r\n\r\n    static getFileType = (filename) => {\r\n        let extension = GeneralPurposeService.getFileExtension(filename)\r\n        let img = [\"jpg\", \"jpeg\", \"png\", \"ico\", \"gif\"]\r\n        let exe = [\"msi\", \"exe\"]\r\n        if(img.includes(extension)){\r\n            return \"image\"\r\n        }\r\n        if(exe.includes(extension)){\r\n            return \"exe\"\r\n        }\r\n        return \"text\"\r\n    }\r\n\r\n    static setHeaderLayout = (usertype) => {\r\n        let adminItems = [\r\n            \"log_redirector\", \"content-table_redirector\", \r\n            \"storage-table_redirector\", \"nodes-status_redirector\", \r\n            \"replication-status_redirector\"\r\n        ]\r\n        let userItems = [\"upload_redirector\", \"home_redirector\", \"profile_data\"]\r\n        adminItems.concat(userItems).forEach(redirector => {\r\n            document.getElementById(redirector).style.display = \"none\"\r\n        })\r\n        if(usertype === \"START\"){\r\n            return;\r\n        }\r\n        if(usertype === \"ADMIN\"){\r\n            adminItems.forEach(redirector => {\r\n                document.getElementById(redirector).style.display = \"block\"\r\n            })\r\n        }\r\n        else{\r\n            userItems.forEach(redirector => {\r\n                document.getElementById(redirector).style.display = \"block\"\r\n            })\r\n        }\r\n    }\r\n\r\n    static prepareURLQuery = (logCriteria) => {\r\n        let options = []\r\n        if(logCriteria.node_address !== null && logCriteria.node_address !== \"ALL\"){\r\n            options.push(`node_address=${logCriteria.node_address}`)\r\n        }\r\n        if(logCriteria.message_type !== null && logCriteria.message_type !== \"ALL\"){\r\n            options.push(`message_type=${logCriteria.message_type}`)\r\n        }\r\n        if(options.length > 0){\r\n            return \"?\" + options.join(\"&\")\r\n        }\r\n        return \"\"\r\n    }\r\n\r\n    static sanitizeURL = (content) => {\r\n        return content.replace(\".\", \"%2E\").replace(\"_\", \"%5F\");\r\n    }\r\n}\r\n","import { Client } from '@stomp/stompjs';\r\n\r\n\r\nexport class Environment{\r\n    static rest_api        = \"http://localhost:8085/api\"\r\n    static frontend_proxy  = \"http://127.0.0.100:8090/proxy\"\r\n    static available_logos = [\"c#\", \"c\", \"cpp\", \"css\", \"html\", \"java\", \"jpg\", \"js\", \"json\",\"pdf\", \"png\", \"py\",\"svg\",\"txt\",\"xml\"]\r\n\r\n    static getWebSocket = () => {\r\n        return new Promise(resolve => {\r\n            let webSocketConnection = new Client({\r\n                brokerURL: \"ws://127.0.0.100:8090/wbsocket\",\r\n                reconnectDelay: 10,\r\n                heartbeatIncoming: 3000,\r\n                heartbeatOutgoing: 3000,\r\n                onConnect: () => {\r\n                    console.log(\"Websocket connected!\")\r\n                    resolve(webSocketConnection)\r\n                },\r\n                onDisconnect: () => {\r\n                    console.log(\"Websocket disconnected.\")\r\n                }\r\n            });\r\n            webSocketConnection.activate()\r\n        })\r\n    }\r\n}","export class HTTPResponseHandler{\r\n    static handleErrorStatus = (response) => {\r\n        return new Promise((resolve) => {\r\n            let response_status = response.status\r\n            let status_code = 0\r\n            response.json().then(response => {\r\n                if(response_status === 401){\r\n                    status_code = 401\r\n                    if(response[\"error status\"] !== null && response[\"error status\"].includes(\"expired\")){\r\n                        response['error status'] = \"You session expired. Please try to reauthenticate.\"\r\n                        alert(\"Sesiunea a expirat! Incercati sa va reautentificati!\")\r\n                        status_code = 402\r\n                    }\r\n                    else{\r\n                        response['error status'] = \"Internal error. We are sorry.\"\r\n                    }\r\n                }\r\n                resolve({\r\n                    \"code\" : status_code,\r\n                    \"message\": response['error status']\r\n                })\r\n            })\r\n        })\r\n    }\r\n}","import {Environment} from '../environment';\r\nimport {HTTPResponseHandler} from '../services/HTTPResponseHandler';\r\n\r\nexport class UsersHandlerService{\r\n    /* ================= ADDITIONAL VALIDATION FUNCTIONS ================= */\r\n    static basicCredentialsCheck = (credentials) => {\r\n        let status = [true, null]\r\n        const forbiddens = [\"\\\"\", \" \", \"/\", \";\", \":\"]\r\n        const Exception = {}\r\n        // verificam sa nu avem campuri goale sau caractere interzise\r\n        try{\r\n            Object.keys(credentials).forEach(credential_key => {\r\n                if(credentials[credential_key] === \"\"){\r\n                    status = [false, `Nu ati introdus ${credential_key}`]\r\n                    throw Exception\r\n                }\r\n                \r\n                forbiddens.forEach(character => {\r\n                    if(character === \" \" && credential_key === \"name\"){\r\n                        return;\r\n                    }\r\n                    if(credentials[credential_key].includes(character)){\r\n                        status = [false, `${credential_key} contine caractere interzise! (${character})`]\r\n                        throw Exception\r\n                    }\r\n                })\r\n\r\n            })\r\n        }\r\n        catch(e){\r\n            return status\r\n        }\r\n\r\n        // verificam ca email-ul sa aiba formatul necesar\r\n        if(!credentials[\"email\"].includes(\"@\") || !credentials[\"email\"].includes(\".\")){\r\n            return [false, \"Username-ul nu respecta formatul unui email.\"];\r\n        }\r\n\r\n        return status\r\n    }\r\n\r\n\r\n    /* ================= RETRIEVE ================= */\r\n    static getAdditionalUserData = (jwt) => {\r\n        return new Promise((resolve) => {\r\n            fetch(`${Environment.rest_api}/user/search`, {\r\n                method : 'GET',\r\n                mode : \"cors\",\r\n                headers : {\r\n                    'Authorization' : `Bearer ${jwt}`,\r\n                },\r\n            }).then(response => {\r\n                if(response.ok){\r\n                    response.json().then(response => {\r\n                        resolve({\r\n                            \"code\" : 1,\r\n                            \"content\" : response\r\n                        })\r\n                    });\r\n                }\r\n                else{\r\n                    HTTPResponseHandler.handleErrorStatus(response).then(status => {\r\n                        resolve({\r\n                            \"code\" : status.code,\r\n                            \"content\" : status.message\r\n                        })\r\n                    });\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    static getUserRole = (jwt) => {\r\n        return new Promise((resolve) => {\r\n            fetch(`${Environment.rest_api}/user/role`, {\r\n                method : 'GET',\r\n                mode : \"cors\",\r\n                headers : {\r\n                    'Authorization' : `Bearer ${jwt}`,\r\n                },\r\n            }).then(response => {\r\n                if(response.ok){\r\n                    response.json().then(response => {\r\n                        resolve({\r\n                            \"code\" : 1,\r\n                            \"content\" : response[\"role\"]\r\n                        })\r\n                    });\r\n                }\r\n                else{\r\n                    HTTPResponseHandler.handleErrorStatus(response).then(status => {\r\n                        resolve({\r\n                            \"code\" : status.code,\r\n                            \"content\" : status.message\r\n                        })\r\n                    });\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    static getAvailableUserTypes = () => {\r\n        return new Promise((resolve) => {\r\n            fetch(`${Environment.rest_api}/usertype/all`, {\r\n                method : 'GET',\r\n                mode : \"cors\",\r\n            }).then(response => {\r\n                if(response.ok){\r\n                    response.json().then(response => {\r\n                        resolve({\r\n                            \"code\" : 1,\r\n                            \"content\" : response\r\n                        })\r\n                    });\r\n                }\r\n                else{\r\n                    HTTPResponseHandler.handleErrorStatus(response).then(status => {\r\n                        resolve({\r\n                            \"code\" : status.code,\r\n                            \"content\" : status.message\r\n                        })\r\n                    });\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    /* ================= CREATE ================= */\r\n    static login = (credentials) => {\r\n        return new Promise((resolve) => {\r\n            let credentialsCheckStatus = this.basicCredentialsCheck(credentials)\r\n            if(credentialsCheckStatus[0] === true){\r\n                let userdata = {\r\n                    \"username\" : credentials[\"email\"],\r\n                    \"password\" : credentials[\"password\"]\r\n                }\r\n                fetch(`${Environment.rest_api}/user/login`, {\r\n                    method : 'POST',\r\n                    mode : 'cors',\r\n                    headers : {\r\n                        'Content-Type' : 'application/json'\r\n                    },\r\n                    body : JSON.stringify(userdata)\r\n                }).then(response => {\r\n                    if(response.ok){\r\n                        response.json().then(response => {\r\n                            resolve({\r\n                                \"code\" : 1,\r\n                                \"content\" : response\r\n                            })\r\n                        });\r\n                    }\r\n                    else{\r\n                        HTTPResponseHandler.handleErrorStatus(response).then(status => {\r\n                            resolve({\r\n                                \"code\" : status.code,\r\n                                \"content\" : status.message\r\n                            })\r\n                        });\r\n                    }\r\n                })\r\n            }\r\n            else{\r\n                resolve({\r\n                    \"code\" : 0,\r\n                    \"content\" : credentialsCheckStatus[1]\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    static register = (credentials) => {\r\n        return new Promise((resolve) => {\r\n            let credentialsCheckStatus = this.basicCredentialsCheck(credentials)\r\n            if(credentialsCheckStatus[0] === true){\r\n                fetch(`${Environment.rest_api}/user`, {\r\n                    method : 'POST',\r\n                    mode : 'cors',\r\n                    headers : {\r\n                        'Content-Type' : 'application/json'\r\n                    },\r\n                    body : JSON.stringify(credentials)\r\n                }).then(response => {\r\n                    if(response.ok){\r\n                        response.json().then(response => {\r\n                            resolve({\r\n                                \"code\" : 1,\r\n                                \"content\" : response\r\n                            })\r\n                        });\r\n                    }\r\n                    else{\r\n                        HTTPResponseHandler.handleErrorStatus(response).then(status => {\r\n                            resolve({\r\n                                \"code\" : status.code,\r\n                                \"content\" : status.message\r\n                            })\r\n                        });\r\n                    }\r\n                })\r\n            }\r\n            else{\r\n                resolve({\r\n                    \"code\" : 0,\r\n                    \"content\" : credentialsCheckStatus[1]\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    /* ================= UPDATE ================= */\r\n    static updatePlan = (jwt, newplan) => {\r\n        return new Promise((resolve) => {\r\n            fetch(`${Environment.rest_api}/user`, {\r\n                method : 'PUT',\r\n                mode : 'cors',\r\n                headers : {\r\n                    'Content-Type' : 'application/json',\r\n                    'Authorization' : `Bearer ${jwt}`\r\n                },\r\n                body : JSON.stringify({\"type\" : newplan})\r\n            }).then(response => {\r\n                if(response.ok){\r\n                    response.json().then(response => {\r\n                        resolve({\r\n                            \"code\" : 1,\r\n                            \"content\" : response\r\n                        })\r\n                    });\r\n                }\r\n                else{\r\n                    HTTPResponseHandler.handleErrorStatus(response).then(status => {\r\n                        resolve({\r\n                            \"code\" : status.code,\r\n                            \"content\" : status.message\r\n                        })\r\n                    });\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import React, { Component }      from 'react';\r\nimport { GeneralPurposeService } from '../services/GeneralPurposeService';\r\nimport {UsersHandlerService}     from '../services/UsersHandlerService';\r\n\r\nimport '../styles/pages-style.css';\r\n\r\nclass StartPage extends Component {\r\n    static availableUserTypes = null\r\n\r\n    constructor(props){\r\n        super(props)\r\n        document.getElementById(\"page-name\").innerHTML = \"Login Page\";\r\n        this.userData = localStorage.getItem('user_data')\r\n        this.accountCredentials = {email : \"\", password : \"\"}\r\n        this.state = {\r\n            isUserConnected            : false,\r\n            userType                   : \"\",\r\n            accountAvailable           : true,\r\n            accountSuccessfullyCreated : false\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        GeneralPurposeService.setHeaderLayout(\"START\")\r\n        this.fetchAvailableUserTypes()\r\n        this.checkForConnectedUser()\r\n        this.fetchUserType()\r\n    }\r\n\r\n    componentDidUpdate = () => {\r\n        if(this.state.accountAvailable === true && this.state.accountSuccessfullyCreated === true){\r\n            document.getElementById(\"status_message\").innerHTML = \"\"\r\n            this.setState({accountSuccessfullyCreated : false})\r\n        }\r\n        if(this.state.isUserConnected === true && this.state.userType !== \"\"){\r\n            this.redirect(this.state.userType === \"ADMIN\" ? \"/ahome\" : \"/uhome\")\r\n        }\r\n    }\r\n\r\n    checkForConnectedUser = () => {\r\n        this.userData = localStorage.getItem('user_data')\r\n        var status = (this.userData !== null && this.userData !== '')\r\n        this.setState({isUserConnected : status});\r\n        if(status === true){\r\n            this.userData = JSON.parse(this.userData)\r\n            document.getElementById(\"log_data_uname\").innerHTML = this.userData[\"name\"];\r\n            document.getElementById(\"log_data_profile\").style.visibility = \"visible\";\r\n        }\r\n        else{\r\n            document.getElementById(\"log_data_uname\").innerHTML = \"\";\r\n            document.getElementById(\"log_data_profile\").style.visibility = \"hidden\";\r\n        }\r\n    }\r\n\r\n    fetchAvailableUserTypes = () => {\r\n        UsersHandlerService.getAvailableUserTypes().then(response => {\r\n            if(response.code === 1){\r\n                StartPage.availableUserTypes = response.content\r\n            }\r\n            else{\r\n            }\r\n        })\r\n    }\r\n\r\n    fetchUserType = () => {\r\n        if(this.userData !== null && this.userData !== ''){\r\n            UsersHandlerService.getUserRole(this.userData[\"jwt\"]).then(response => {\r\n                if(response.code === 1){\r\n                    this.setState({userType : response[\"content\"]})\r\n                }\r\n                else if(response.code === 401){\r\n                    localStorage.setItem(\"user_data\", '')\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    login = () => {\r\n        //this.accountCredentials = {\"email\" : \"stefanc.stratulat@gmail.com\", \"password\" : \"parola.dropbox123\"}\r\n        //this.accountCredentials = {\"email\" : \"dropbox.com@dpbox.com\", \"password\" : \"82467913\"}\r\n        UsersHandlerService.login(this.accountCredentials).then(response => {\r\n            if(response.code === 1){\r\n                localStorage.setItem(\"user_data\", JSON.stringify(response.content))\r\n                this.checkForConnectedUser()\r\n                this.fetchUserType()\r\n                document.getElementById(\"logoutButton\").style.visibility = \"visible\"\r\n            }\r\n            else{\r\n                document.getElementById(\"status_message\").style.display = \"block\"\r\n                document.getElementById(\"status_message\").style.color   = \"#810000\";\r\n                document.getElementById(\"status_message\").innerHTML     = response.content\r\n            }\r\n        })\r\n    }\r\n\r\n    createAccount = () => {\r\n        UsersHandlerService.register(this.accountCredentials).then(response => {\r\n            document.getElementById(\"status_message\").style.display = \"block\"\r\n            if(response.code === 1){\r\n                document.getElementById(\"status_message\").innerHTML   = response.content[\"success status\"]\r\n                document.getElementById(\"status_message\").style.color = \"#206a5d\";\r\n                this.setState({accountSuccessfullyCreated : true})\r\n            }\r\n            else{\r\n                document.getElementById(\"status_message\").style.color = \"#810000\";\r\n                document.getElementById(\"status_message\").innerHTML   = response.content\r\n            }\r\n        })\r\n    }\r\n\r\n    redirect = (destination) => {\r\n        if(destination !== \"\"){\r\n            this.props.history.push({\r\n                \"pathname\" : destination,\r\n                \"state\" : {\"detail\" : {\"user_type\" : this.state.userType}}\r\n            })\r\n        }\r\n        else{\r\n            this.props.history.push(\"/\")\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let userypesoptions = []\r\n        if(StartPage.availableUserTypes !== null){\r\n            StartPage.availableUserTypes.forEach(usertype => {\r\n                userypesoptions.push(\r\n                    <option key={`option_${usertype[\"user_type\"]}`} value={usertype[\"user_type\"]}>{usertype[\"user_type\"]}</option>\r\n                )\r\n            })\r\n        }\r\n\r\n\r\n      return (\r\n        <div className=\"App\">\r\n            <div className=\"title\">\r\n                <img id=\"title_logo\" src=\"images/logo.png\" alt=\"Logo not found\"/>\r\n                <label id=\"title_text\">Safestorage</label>\r\n            </div>\r\n            <hr/>\r\n            {this.state.isUserConnected === false ?\r\n                <div id=\"homediv\">\r\n                    <div id=\"homediv_left\">\r\n                        <div id=\"homediv_imgdiv\">\r\n                            <img id=\"homediv_img\" src=\"/images/mainpage_img.png\" alt=\"\"/>\r\n                        </div>\r\n                        <div id=\"homediv_descdiv\">\r\n                            <p>\r\n                                File storage and versioning\r\n                                <br/>\r\n                                <br/>\r\n                                The ultimate app for storing and versioning your files in the safest way\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"homediv_right\">\r\n                        {this.state.accountAvailable === true ? \r\n                        <div>\r\n                            <p className=\"login_header\">Log into your account</p>\r\n                            <p>Email</p>\r\n                            <input \r\n                                onChange={(event) => {this.accountCredentials[\"email\"] = event.target.value}} \r\n                                type=\"email\"/>\r\n                            <p>Password</p>\r\n                            <input \r\n                                onChange={(event) => {this.accountCredentials[\"password\"] = event.target.value}} \r\n                                type=\"password\"/>\r\n                            <p><button className=\"redirector\" onClick={this.login}>Autentificare</button></p>\r\n                        </div> : \r\n                        <div>\r\n                            <p className=\"login_header\">Create account</p>\r\n                            <p>Name</p>\r\n                            <input \r\n                                onChange={(event) => {this.accountCredentials[\"name\"] = event.target.value}} \r\n                                type=\"text\" />\r\n                            <p>Email</p>\r\n                            <input \r\n                                onChange={(event) => {this.accountCredentials[\"email\"] = event.target.value}} \r\n                                type=\"email\" />\r\n                            <p>Password</p>\r\n                            <input \r\n                                onChange={(event) => {this.accountCredentials[\"password\"] = event.target.value}} \r\n                                type=\"password\" />\r\n                            <p>User type</p>\r\n                            <select onChange={(event) => {this.accountCredentials[\"type\"] = event.target.value}}>\r\n                                {userypesoptions}\r\n                            </select>\r\n                            <p>Country</p>\r\n                            <input \r\n                                onChange={(event) => {this.accountCredentials[\"country\"] = event.target.value}} \r\n                                type=\"text\" />\r\n                            <br/>\r\n                            <label><button className=\"redirector\" onClick={this.createAccount}>Create account</button></label>\r\n                        </div>}\r\n                        <p id=\"status_message\">gol</p>\r\n                        {this.state.accountSuccessfullyCreated === true ? \r\n                            <p><button className=\"a_redirector\" onClick={() => {\r\n                                    this.setState({accountAvailable : true})\r\n                                    this.accountCredentials = {email : \"\", password : \"\"}\r\n                                }}>\r\n                                Go to login.\r\n                                </button>\r\n                            </p> : <p></p>\r\n                        }\r\n                        {this.state.accountAvailable === true ? \r\n                            <p>No account ? <button className=\"a_redirector\" onClick={() => {\r\n                                document.getElementById(\"status_message\").style.color = \"#02475e\";\r\n                                document.getElementById(\"status_message\").style.display = \"none\"\r\n                                this.setState({accountAvailable : false})\r\n                                this.accountCredentials = {name : \"\", email : \"\", password : \"\", type: `${StartPage.availableUserTypes[0][\"user_type\"]}`, country : \"\"}\r\n                                }}>Create an account</button></p> : \r\n                            <p>Have account ? <button className=\"a_redirector\" onClick={() => {\r\n                                document.getElementById(\"status_message\").style.color = \"#02475e\";\r\n                                document.getElementById(\"status_message\").style.display = \"none\"\r\n                                this.setState({accountAvailable : true})\r\n                                this.accountCredentials = {name : \"\", email : \"\", password : \"\", type: `${StartPage.availableUserTypes[0][\"user_type\"]}`, country : \"\"}\r\n                                }}>Sign in</button>\r\n                            </p>\r\n                        }\r\n                    </div>\r\n                </div> : <p></p>\r\n            }\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default StartPage;","import React, { Component } from 'react';\r\n\r\nimport {UsersHandlerService}     from '../services/UsersHandlerService';\r\nimport { GeneralPurposeService } from '../services/GeneralPurposeService';\r\n\r\nimport '../styles/pages-style.css';\r\nimport '../styles/pages-profile.css';\r\n\r\nclass ProfilePage extends Component {\r\n    static userDetailsCategories = [\"storage_status\", \"plan\"]\r\n    static availableUserTypes = null\r\n    \r\n    constructor(props){\r\n        super(props)\r\n        document.getElementById(\"page-name\").innerHTML = \"Profile Page\";\r\n        GeneralPurposeService.setHeaderLayout(\"USER\")\r\n        this.userData = localStorage.getItem('user_data')\r\n        this.state = {\r\n            isUserConnected     : false,\r\n            userType            : \"\",\r\n            userDetailsCategory : ProfilePage.userDetailsCategories[0],\r\n            additionalUserData  : null\r\n        }\r\n    }\r\n\r\n    componentDidUpdate = () => {\r\n        ProfilePage.userDetailsCategories.forEach(category => {\r\n            document.getElementById(`selector_${category}`).style.borderBottom = \r\n                (category === this.state.userDetailsCategory) ? \"3px solid #23049d\" : \"none\";\r\n        })\r\n\r\n        if(this.state.userDetailsCategory === ProfilePage.userDetailsCategories[0] && this.state.additionalUserData === null){\r\n            this.fetchAdditionalUserData()\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.fetchAvailableUserTypes()\r\n        this.checkForConnectedUser()\r\n    }\r\n\r\n    fetchAvailableUserTypes = () => {\r\n        UsersHandlerService.getAvailableUserTypes().then(response => {\r\n            if(response.code === 1){\r\n                ProfilePage.availableUserTypes = {}\r\n                response.content.forEach(usertype => {\r\n                    let utype = usertype[\"user_type\"]\r\n                    delete usertype[\"user_type\"]\r\n                    ProfilePage.availableUserTypes[utype] = usertype\r\n                })\r\n            }\r\n            else{\r\n                console.log(response.content)\r\n            }\r\n        })\r\n    }\r\n\r\n    fetchUserType = () => {\r\n        if(this.userData !== null && this.userData !== ''){\r\n            UsersHandlerService.getUserRole(this.userData[\"jwt\"]).then(response => {\r\n                if(response.code === 1){\r\n                    console.log(\"role : \" + response[\"content\"])\r\n                    this.setState({userType : response[\"content\"]})\r\n                }\r\n                else if(response.code === 401){\r\n                    localStorage.setItem(\"user_data\", '')\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    fetchAdditionalUserData = () => {\r\n        UsersHandlerService.getAdditionalUserData(this.userData[\"jwt\"]).then(response => {\r\n            if(response.code === 1){\r\n                this.setState({additionalUserData : response.content})\r\n                localStorage.setItem(\"additional_user_data\", JSON.stringify(response.content))\r\n            }\r\n            else{\r\n                console.log(response.content)\r\n            }\r\n        })\r\n    }\r\n\r\n    checkForConnectedUser = () => {\r\n        this.userData = localStorage.getItem('user_data')\r\n        var status = (this.userData !== null && this.userData !== '')\r\n        this.setState({\r\n            isUserConnected : status,\r\n        });\r\n        if(status === true){\r\n            this.userData = JSON.parse(this.userData)\r\n            document.getElementById(\"log_data_uname\").innerHTML = this.userData[\"name\"];\r\n            document.getElementById(\"log_data_profile\").style.visibility = \"visible\";\r\n        }\r\n        else{\r\n            document.getElementById(\"log_data_uname\").innerHTML = \"\";\r\n            document.getElementById(\"log_data_profile\").style.visibility = \"hidden\";\r\n        }\r\n    }\r\n\r\n    updatePlan = (newplan) => {\r\n        document.getElementById(\"updatePlanStatus\").innerHTML = `Plan updating to ${newplan}...`\r\n        UsersHandlerService.updatePlan(this.userData[\"jwt\"], newplan).then(response => {\r\n            if(response.code === 1){\r\n                document.getElementById(\"updatePlanStatus\").innerHTML = `Plan successfully changed to ${newplan}.`\r\n                this.fetchAdditionalUserData()\r\n            }\r\n            else{\r\n                console.log(response.content)\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let userDetails = <div></div>\r\n        let generalData = <div></div>\r\n        if(this.state.additionalUserData !== null){\r\n            generalData = \r\n                <div className = \"accountData\">\r\n                    <p className=\"accountDataField\" >\r\n                        Name\r\n                        <span className = \"accountDataValue\">{this.state.additionalUserData[\"name\"]}</span>\r\n                    </p>\r\n                    <p className=\"accountDataField\" >\r\n                        Email\r\n                        <span className = \"accountDataValue\">{this.state.additionalUserData[\"email\"]}</span>\r\n                    </p>\r\n                    <p className=\"accountDataField\" >\r\n                        Country\r\n                        <span className = \"accountDataValue\">{this.state.additionalUserData[\"country\"]}</span>\r\n                    </p>\r\n                    <p className=\"accountDataField\" >\r\n                        Account Plan\r\n                        <span className = \"accountDataValue\">{this.state.additionalUserData[\"type\"]}</span>\r\n                    </p>\r\n                </div>\r\n            switch(this.state.userDetailsCategory){\r\n                case \"storage_status\" : {\r\n                    let total_storage = ProfilePage.availableUserTypes[this.state.additionalUserData[\"type\"]][\"available_storage\"]\r\n                    let available_storage = this.state.additionalUserData[\"storage_quantity\"]\r\n                    let used_storage = total_storage - available_storage\r\n                    userDetails = \r\n                        <div className = \"accountData\">\r\n                            <p className=\"accountDataField\" >\r\n                                Total Storage\r\n                                <span className = \"accountDataValue\">\r\n                                    {GeneralPurposeService.getFileSizeUnit(total_storage)}\r\n                                </span>\r\n                            </p>\r\n                            <p className=\"accountDataField\" >\r\n                                Used Storage\r\n                                <span className = \"accountDataValue\">\r\n                                    {GeneralPurposeService.getFileSizeUnit(used_storage)}\r\n                                </span>\r\n                            </p>\r\n                            <p className=\"accountDataField\" >\r\n                                Available Storage\r\n                                <span className = \"accountDataValue\">\r\n                                    {GeneralPurposeService.getFileSizeUnit(available_storage)}\r\n                                </span>\r\n                            </p>\r\n                        </div>\r\n                    break\r\n                }\r\n                case \"plan\" : {\r\n                    let businessPlans = []\r\n                    Object.keys(ProfilePage.availableUserTypes).forEach(usertype => {\r\n                        if(usertype !== this.state.additionalUserData[\"type\"]){\r\n                            let index = 0;\r\n                            businessPlans.push(\r\n                                <div key={`${index}_upgradeplan`} className=\"upgradeplan\">\r\n                                    <p>{usertype}</p>\r\n                                    <p>{GeneralPurposeService.getFileSizeUnit(ProfilePage.availableUserTypes[usertype][\"available_storage\"])}</p>\r\n                                    <p>{ProfilePage.availableUserTypes[usertype][\"price_dollars\"]} $</p>\r\n                                    <button className=\"redirector\" onClick={() => this.updatePlan(usertype)}>Update to {usertype}</button>\r\n                                    <br/>\r\n                                    <br/>\r\n                                </div>,\r\n                            )\r\n                        }\r\n                    })\r\n                    userDetails = \r\n                        <div className = \"accountData\">\r\n                            <p>Do you want to update your business plan ? </p>\r\n                            <p>Select one of the followings</p>\r\n                            <br/><br/>\r\n                            {businessPlans}\r\n                            <p id=\"updatePlanStatus\"></p>\r\n                        </div>\r\n                    break\r\n                }\r\n                default : {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            userDetails = <p>Fetching user data..</p>\r\n        }\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"title\">\r\n                    <img id=\"title_logo\" src=\"images/logo.png\" alt=\"Logo not found\"/>\r\n                    <label id=\"title_text\">Safestorage</label>\r\n                </div>\r\n                <hr/>\r\n                {this.state.isUserConnected === true ?\r\n                    <div className=\"profile\">\r\n                        <div className=\"profile_left\">\r\n                            <img id=\"log_data_profile\" src=\"images/user_logo.png\" alt=\"\"/>\r\n                            <p id=\"username\">{this.userData.name}</p>\r\n                            <hr/>\r\n                            {generalData}\r\n                            \r\n                        </div>\r\n                        <div className=\"profile_right\">\r\n                            <ul>\r\n                                <li><button className=\"a_redirector\" id=\"selector_storage_status\" href=\"#\" onClick={() => {\r\n                                    this.setState({userDetailsCategory: ProfilePage.userDetailsCategories[0]})\r\n                                    }}>Storage Status</button>\r\n                                </li>\r\n                                <li><button className=\"a_redirector\" id=\"selector_plan\" href=\"#\" onClick={() => {\r\n                                    this.setState({userDetailsCategory: ProfilePage.userDetailsCategories[1]})\r\n                                    }}>Plan</button>\r\n                                </li>\r\n                            </ul>\r\n                            <hr/>\r\n                            {userDetails}\r\n                        </div>\r\n                    </div>: \r\n                    <p>Nu puteti accesa aceasta pagina daca utilizatorul nu este conectat</p>\r\n                }\r\n            </div>\r\n      );\r\n    }\r\n}\r\n  \r\n  export default ProfilePage;","import {Environment} from '../environment';\r\nimport {HTTPResponseHandler} from '../services/HTTPResponseHandler';\r\nimport { UsersHandlerService } from './UsersHandlerService';\r\n\r\nexport class FileHandlerService{\r\n    static uploadFile = (file, jwt, description, usertype) => {\r\n        // https://www.smashingmagazine.com/2018/01/drag-drop-file-uploader-vanilla-js/\r\n        \r\n        let url = `${Environment.frontend_proxy}/upload`\r\n\r\n        let additional_user_data = localStorage.getItem(\"additional_user_data\")\r\n        if(additional_user_data === null || additional_user_data === \"\"){\r\n            UsersHandlerService.getAdditionalUserData(jwt).then(response => {\r\n                additional_user_data = response.content\r\n                localStorage.setItem(\"additional_user_data\", JSON.stringify(additional_user_data))\r\n            })\r\n        }\r\n        else{\r\n            additional_user_data = JSON.parse(additional_user_data)\r\n        }\r\n        let formData = new FormData()\r\n        formData.append('file', file)\r\n          \r\n        return new Promise((resolve) => {\r\n            fetch(url, {\r\n                method: 'POST',\r\n                mode : \"cors\",\r\n                body: formData,\r\n                headers : {\r\n                    'Authorization' : `Bearer ${jwt}`,\r\n                    \"version_description\" : description,\r\n                    \"user_type\" : usertype,\r\n                    \"available_storage\" : additional_user_data.storage_quantity\r\n                }\r\n            }).then(response => {\r\n                if(response.ok){\r\n                    response.json().then(response => {\r\n                        resolve({\r\n                            \"code\" : 1,\r\n                            \"content\" : response[\"success status\"]\r\n                        })\r\n                    });\r\n                }\r\n                else{\r\n                    HTTPResponseHandler.handleErrorStatus(response).then(status => {\r\n                        resolve({\r\n                            \"code\" : status.code,\r\n                            \"content\" : status.message\r\n                        })\r\n                    });\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    static getUserFiles = (jwt) => {\r\n        let url = `${Environment.frontend_proxy}/files`\r\n\r\n        return new Promise((resolve) => {\r\n            fetch(url, {\r\n                method: 'GET',\r\n                mode : \"cors\",\r\n                headers : {\r\n                    'Authorization' : `Bearer ${jwt}`,\r\n                }\r\n            }).then(response => {\r\n                if(response.ok){\r\n                    response.json().then(response => {\r\n                        resolve({\r\n                            \"code\" : 1,\r\n                            \"content\" : response\r\n                        })\r\n                    });\r\n                }\r\n                else{\r\n                    HTTPResponseHandler.handleErrorStatus(response).then(status => {\r\n                        resolve({\r\n                            \"code\" : status.code,\r\n                            \"content\" : status.message\r\n                        })\r\n                    });\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    static getFileHistory = (jwt, filename) => {\r\n        let url = `${Environment.frontend_proxy}/history?filename=${filename}`\r\n\r\n        return new Promise((resolve) => {\r\n            fetch(url, {\r\n                method: 'GET',\r\n                mode : \"cors\",\r\n                headers : {\r\n                    'Authorization' : `Bearer ${jwt}`,\r\n                }\r\n            }).then(response => {\r\n                if(response.ok){\r\n                    response.json().then(response => {\r\n                        resolve({\r\n                            \"code\" : 1,\r\n                            \"content\" : response\r\n                        })\r\n                    });\r\n                }\r\n                else{\r\n                    HTTPResponseHandler.handleErrorStatus(response).then(status => {\r\n                        resolve({\r\n                            \"code\" : status.code,\r\n                            \"content\" : status.message\r\n                        })\r\n                    });\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    static deleteFile = (jwt, filename, description) => {\r\n        let url = `${Environment.frontend_proxy}/${filename}`\r\n\r\n        return new Promise((resolve) => {\r\n            fetch(url, {\r\n                method: 'DELETE',\r\n                mode : \"cors\",\r\n                headers : {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization' : `Bearer ${jwt}`,\r\n                },\r\n                body : JSON.stringify({\"description\" : description})\r\n            }).then(response => {\r\n                if(response.ok){\r\n                    response.json().then(response => {\r\n                        resolve({\r\n                            \"code\" : 1,\r\n                            \"content\" : response\r\n                        })\r\n                    });\r\n                }\r\n                else{\r\n                    HTTPResponseHandler.handleErrorStatus(response).then(status => {\r\n                        resolve({\r\n                            \"code\" : status.code,\r\n                            \"content\" : status.message\r\n                        })\r\n                    });\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    static renameFile = (jwt, filename, newname, description) => {\r\n        let url = `${Environment.frontend_proxy}/${filename}`\r\n\r\n        return new Promise((resolve) => {\r\n            fetch(url, {\r\n                method: 'PUT',\r\n                mode : \"cors\",\r\n                headers : {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization' : `Bearer ${jwt}`,\r\n                },\r\n                body : JSON.stringify({\"description\" : description, \"newname\" : newname})\r\n            }).then(response => {\r\n                if(response.ok){\r\n                    response.json().then(response => {\r\n                        resolve({\r\n                            \"code\" : 1,\r\n                            \"content\" : response\r\n                        })\r\n                    });\r\n                }\r\n                else{\r\n                    HTTPResponseHandler.handleErrorStatus(response).then(status => {\r\n                        resolve({\r\n                            \"code\" : status.code,\r\n                            \"content\" : status.message\r\n                        })\r\n                    });\r\n                }\r\n            })\r\n        })\r\n    }\r\n    \r\n    static downloadFile = (jwt, filename) => {\r\n        let url = `${Environment.frontend_proxy}/${filename}`\r\n\r\n        return new Promise((resolve) => {\r\n            fetch(url, {\r\n                method: 'GET',\r\n                mode : \"cors\",\r\n                headers : {\r\n                    'Authorization' : `Bearer ${jwt}`,\r\n                }\r\n            }).then(response => {\r\n                if(response.ok){\r\n                    response.json().then(response => {\r\n                        resolve({\r\n                            \"code\" : 1,\r\n                            \"content\" : response[\"success status\"]\r\n                        })\r\n                    });\r\n                }\r\n                else{\r\n                    HTTPResponseHandler.handleErrorStatus(response).then(status => {\r\n                        resolve({\r\n                            \"code\" : status.code,\r\n                            \"content\" : status.message\r\n                        })\r\n                    });\r\n                }\r\n            })\r\n        })\r\n    }\r\n}\r\n","import React, { Component }  from 'react';\r\nimport {UsersHandlerService} from '../services/UsersHandlerService';\r\n\r\nimport { FileHandlerService }    from '../services/FileHandlerService';\r\nimport { Environment }           from '../environment';\r\nimport { GeneralPurposeService } from '../services/GeneralPurposeService';\r\n\r\nimport '../styles/pages-style.css';\r\nimport '../styles/pages_usermain.css';\r\nimport '../styles/pages-home-style.css';\r\n\r\nclass MainUserPage extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        document.getElementById(\"page-name\").innerHTML = \"Home Page\";\r\n        this.userData = localStorage.getItem('user_data')\r\n        this.description = null\r\n        this.newname     = null\r\n        this.state = {\r\n            isUserConnected            : false,\r\n            userType                   : null,\r\n            accountAvailable           : true,\r\n            accountSuccessfullyCreated : false,\r\n            userFiles                  : null,\r\n            currentFileName            : null,\r\n            availableNodes             : null,\r\n            fileDetails                : null\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        GeneralPurposeService.setHeaderLayout(\"USER\")\r\n        this.checkForConnectedUser()\r\n        this.fetchUserType().then(_ => {\r\n            this.fetchUserFiles()\r\n        })\r\n    }\r\n\r\n    fetchUserType = () => {\r\n        return new Promise(resolve => {\r\n            try{\r\n                this.setState({userType : this.props.location.state.detail[\"user_type\"]})\r\n                resolve(null)\r\n            }\r\n            catch(e){\r\n                UsersHandlerService.getUserRole(this.userData[\"jwt\"]).then(response => {\r\n                    if(response.code === 1){\r\n                        this.setState({userType : response[\"content\"]})\r\n                    }\r\n                    else if(response.code === 401){\r\n                        localStorage.setItem(\"user_data\", '')\r\n                    }\r\n                    resolve(null)\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    fetchUserFiles = () =>{\r\n        document.getElementById(\"number_of_file\").innerHTML = \"\"\r\n        FileHandlerService.getUserFiles(this.userData[\"jwt\"]).then(response => {\r\n            console.log(response)\r\n            if(response.code === 1){\r\n                document.getElementById(\"number_of_file\").innerHTML = `Found ${response.content.length} files`;\r\n                this.setState({userFiles : (response.content.length === 0) ? null : response.content})\r\n            }\r\n            else{\r\n                this.setState({userFiles : null})\r\n            }\r\n        })\r\n    }\r\n\r\n    checkForConnectedUser = () => {\r\n        this.userData = localStorage.getItem('user_data')\r\n        if(this.userData === null || this.userData === ''){\r\n            this.redirect(\"\")\r\n        }\r\n        else{\r\n            this.userData = JSON.parse(this.userData)\r\n        }\r\n    }\r\n\r\n    redirect = (destination, param) => {\r\n        if(destination !== \"\"){\r\n            localStorage.setItem(\"userfile\", JSON.stringify(param))\r\n            this.props.history.push(destination);\r\n        }\r\n        else{\r\n            this.props.history.push(\"/\")\r\n        }\r\n    }\r\n\r\n    render(){\r\n        var userFiles = []\r\n        if(this.state.userType !== null){\r\n            if(this.state.userFiles !== null){\r\n                this.state.userFiles.forEach(userFile => {\r\n                    let logosrc = `/images/file_logo/${userFile.filename.split(\".\")[1]}.png`\r\n                    if(!Environment.available_logos.includes(userFile.filename.split(\".\")[1])){\r\n                        logosrc = `/images/file_logo/extra.png` \r\n                    }\r\n                    userFiles.push(\r\n                        <tr key={`div_${userFile.filename}`}>\r\n                            <td><img alt=\"logo\" src={logosrc}></img></td>\r\n                            <td className = \"table_fname\">\r\n                                <p><button className=\"a_redirector\"\r\n                                    style={{fontSize:\"90%\", textDecoration:\"underline\"}} \r\n                                    onClick={() => this.redirect(\"/details\", userFile)} \r\n                                    >{`${userFile.filename + \"\"}`}</button>\r\n                                </p><br/>\r\n                                <span>{`Version : ${userFile.version}`}</span><br/>\r\n                                <span>{`Size : ${GeneralPurposeService.getFileSizeUnit(userFile.filesize)}`}</span>\r\n                            </td>\r\n                            <td className = \"table_version\"><p>{`${userFile.version_description}`}</p></td>\r\n                            <td className = \"table_version\"><p>{`${userFile.hash.toString(16)}`}</p></td>\r\n                        </tr>\r\n                    )\r\n                })\r\n            }\r\n        }\r\n        return(\r\n            <div className=\"App\">\r\n                <div className=\"Home\">\r\n                    <div>\r\n                        <div className=\"home_header\">\r\n                            <p id=\"p_filename\">My files</p>\r\n                            <p id=\"number_of_file\">&nbsp;</p>\r\n                        </div>\r\n                        <hr id=\"mainpage_hr\"/>\r\n                        <br/><br/>\r\n                        <div className = \"home_body_main_div\">\r\n                            {this.state.userFiles === null ? \r\n                                <div style={{width:\"100%\"}}>\r\n                                    <img src= \"/images/not_found.png\" />\r\n                                    <br/><br/><br/>\r\n                                    <p>No file found!</p>\r\n                                    <br/>\r\n                                    <p>Please consider uploading a file first!</p>\r\n                                </div>:\r\n                                <table>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <td>Logo</td>\r\n                                            <td>File name</td>\r\n                                            <td>Version Description</td>\r\n                                            <td>Hash</td>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {userFiles}\r\n                                    </tbody>\r\n                                </table>\r\n                            }\r\n                        </div>\r\n                    </div> \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainUserPage;","import {Environment} from '../environment';\r\nimport {HTTPResponseHandler} from '../services/HTTPResponseHandler';\r\nimport { GeneralPurposeService } from './GeneralPurposeService';\r\n\r\nexport class AdminHandlerService{\r\n    static fetchLog = (jwt, logCriteria) => {\r\n        let url = `${Environment.rest_api}/log`\r\n        \r\n        url += GeneralPurposeService.prepareURLQuery(logCriteria)\r\n\r\n        return new Promise((resolve) => {\r\n            fetch(url, {\r\n                method: 'GET',\r\n                mode : \"cors\",\r\n                headers : {\r\n                    'Authorization' : `Bearer ${jwt}`,\r\n                },\r\n            }).then(response => {\r\n                if(response.ok){\r\n                    response.json().then(response => {\r\n                        resolve({\r\n                            \"code\" : 1,\r\n                            \"content\" : response\r\n                        })\r\n                    });\r\n                }\r\n                else{\r\n                    HTTPResponseHandler.handleErrorStatus(response).then(status => {\r\n                        resolve({\r\n                            \"code\" : status.code,\r\n                            \"content\" : status.message\r\n                        })\r\n                    });\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    static fetchAvailableNodesFromAPI = (jwt) => {\r\n        let url = `${Environment.rest_api}/internalnode/all`\r\n\r\n        return new Promise((resolve) => {\r\n            fetch(url, {\r\n                method: 'GET',\r\n                mode : \"cors\",\r\n                headers : {\r\n                    'Authorization' : `Bearer ${jwt}`,\r\n                }\r\n            }).then(response => {\r\n                if(response.ok){\r\n                    response.json().then(response => {\r\n                        resolve({\r\n                            \"code\" : 1,\r\n                            \"content\" : response\r\n                        })\r\n                    });\r\n                }\r\n                else{\r\n                    HTTPResponseHandler.handleErrorStatus(response).then(status => {\r\n                        resolve({\r\n                            \"code\" : status.code,\r\n                            \"content\" : status.message\r\n                        })\r\n                    });\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    static cleanLog = (jwt, logCriteria) => {\r\n        console.log(\"cleaning log...\")\r\n\r\n        let url = `${Environment.rest_api}/log`\r\n        \r\n        url += GeneralPurposeService.prepareURLQuery(logCriteria)\r\n\r\n        return new Promise((resolve) => {\r\n            fetch(url, {\r\n                method: 'DELETE',\r\n                mode : \"cors\",\r\n                headers : {\r\n                    'Authorization' : `Bearer ${jwt}`,\r\n                }\r\n            }).then(response => {\r\n                if(response.ok){\r\n                    response.json().then(response => {\r\n                        resolve({\r\n                            \"code\" : 1,\r\n                            \"content\" : response\r\n                        })\r\n                    });\r\n                }\r\n                else{\r\n                    HTTPResponseHandler.handleErrorStatus(response).then(status => {\r\n                        resolve({\r\n                            \"code\" : status.code,\r\n                            \"content\" : status.message\r\n                        })\r\n                    });\r\n                }\r\n            })\r\n        })\r\n    }\r\n    \r\n\r\n    static fetchNodesStoringFile = (jwt, userId, filename) => {\r\n        let url = `${Environment.frontend_proxy}/nodesforfile?user=${userId}&filename=${GeneralPurposeService.sanitizeURL(filename)}`\r\n        return new Promise((resolve) => {\r\n            fetch(url, {\r\n                method: 'GET',\r\n                mode : \"cors\",\r\n                headers : {\r\n                    'Authorization' : `Bearer ${jwt}`,\r\n                },\r\n            }).then(response => {\r\n                if(response.ok){\r\n                    response.json().then(response => {\r\n                        resolve({\r\n                            \"code\" : 1,\r\n                            \"content\" : response\r\n                        })\r\n                    });\r\n                }\r\n                else{\r\n                    HTTPResponseHandler.handleErrorStatus(response).then(status => {\r\n                        resolve({\r\n                            \"code\" : status.code,\r\n                            \"content\" : status.message\r\n                        })\r\n                    });\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    static fetchNodeData = (jwt, nodeAddress) => {\r\n        let url = `${Environment.rest_api}/internalnode/${nodeAddress}`\r\n        \r\n        return new Promise((resolve) => {\r\n            fetch(url, {\r\n                method: 'GET',\r\n                mode : \"cors\",\r\n                headers : {\r\n                    'Authorization' : `Bearer ${jwt}`,\r\n                }\r\n            }).then(response => {\r\n                if(response.ok){\r\n                    response.json().then(response => {\r\n                        resolve({\r\n                            \"code\" : 1,\r\n                            \"content\" : response\r\n                        })\r\n                    });\r\n                }\r\n                else{\r\n                    HTTPResponseHandler.handleErrorStatus(response).then(status => {\r\n                        resolve({\r\n                            \"code\" : status.code,\r\n                            \"content\" : status.message\r\n                        })\r\n                    });\r\n                }\r\n            })\r\n        })\r\n    } \r\n\r\n    static getFileVersions = (jwt, userid, filename) => {\r\n        let url = `${Environment.frontend_proxy}/versions?filename=${filename}&userid=${userid}`\r\n\r\n        return new Promise((resolve) => {\r\n            fetch(url, {\r\n                method: 'GET',\r\n                mode : \"cors\",\r\n                headers : {\r\n                    'Authorization' : `Bearer ${jwt}`,\r\n                },\r\n            }).then(response => {\r\n                if(response.ok){\r\n                    response.json().then(response => {\r\n                        resolve({\r\n                            \"code\" : 1,\r\n                            \"content\" : response\r\n                        })\r\n                    });\r\n                }\r\n                else{\r\n                    HTTPResponseHandler.handleErrorStatus(response).then(status => {\r\n                        resolve({\r\n                            \"code\" : status.code,\r\n                            \"content\" : status.message\r\n                        })\r\n                    });\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    static deleteFileFromInternalNode = (jwt, file) => {\r\n        let url = `${Environment.frontend_proxy}/internalnodefile?user=${file.user}&filename=${file.filename}&address=${file.address}`\r\n\r\n        return new Promise((resolve) => {\r\n            fetch(url, {\r\n                method: 'DELETE',\r\n                mode : \"cors\",\r\n                headers : {\r\n                    'Authorization' : `Bearer ${jwt}`,\r\n                }\r\n            }).then(response => {\r\n                if(response.ok){\r\n                    response.json().then(response => {\r\n                        resolve({\r\n                            \"code\" : 1,\r\n                            \"content\" : response\r\n                        })\r\n                    });\r\n                }\r\n                else{\r\n                    HTTPResponseHandler.handleErrorStatus(response).then(status => {\r\n                        resolve({\r\n                            \"code\" : status.code,\r\n                            \"content\" : status.message\r\n                        })\r\n                    });\r\n                }\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\n","import React, { Component }  from 'react';\r\nimport {UsersHandlerService} from '../services/UsersHandlerService';\r\n\r\nimport { GeneralPurposeService } from '../services/GeneralPurposeService';\r\nimport { AdminHandlerService }   from '../services/AdminHandlerService';\r\nimport { Environment }           from '../environment';\r\nimport { PieChart }              from 'react-minimal-pie-chart';\r\n\r\nimport '../styles/pages-style.css';\r\nimport '../styles/pages-home-style.css';\r\nimport '../styles/pages-admin-style.css';\r\n\r\nclass AdminMainPage extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        document.getElementById(\"page-name\").innerHTML = \"Admin console\";\r\n        this.userData = localStorage.getItem('user_data')\r\n        this.menu_selection = null\r\n        this.state = {\r\n            isUserConnected    : false,\r\n            userType           : null,\r\n            accountAvailable   : true,\r\n            availableNodes     : null,\r\n            log                : null,\r\n            replication_status : null,\r\n            content            : null,\r\n            content_nodes_data : null,\r\n            file_versions      : null,\r\n            storagestatus      : null,\r\n            current_address    : null,\r\n            connectionTable    : {\"addresses\" : null, \"status\" : null, \"current_address\" : null},\r\n            websocket          : {\"connected\" : false, \"subscriptions\" : null},\r\n            error_status       : {code : -1, message : \"\"}\r\n        }\r\n        this.logCriteria = {message_type : \"ALL\", node_address : \"ALL\", date1 : GeneralPurposeService.getCurrentTimestampForLogging(\"1 year\")}\r\n        this.webSocketConnection = null;\r\n        this.selectedFile        = null\r\n        GeneralPurposeService.setHeaderLayout(\"ADMIN\")\r\n        document.getElementById(\"log_redirector\").onclick = () => this.adminAction(\"log\")\r\n        document.getElementById(\"content-table_redirector\").onclick = () => this.adminAction(\"content\")\r\n        document.getElementById(\"storage-table_redirector\").onclick = () => this.adminAction(\"storage\")\r\n        document.getElementById(\"nodes-status_redirector\").onclick = () => this.adminAction(\"nodes\")\r\n        document.getElementById(\"replication-status_redirector\").onclick = () => this.adminAction(\"replication\")\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.checkForConnectedUser()\r\n        this.fetchUserType().then(usertype_result => {\r\n            if(usertype_result !== undefined){\r\n                this.fetchAvailableNodes().then(response => {\r\n                    if(response !== undefined){\r\n                        if(this.state.error_status.code === -1){\r\n                            this.adminAction('log')\r\n                            Environment.getWebSocket().then(response => {\r\n                                this.webSocketConnection = response\r\n                                this.setState({websocket : {\"connected\" : true}}, () => {\r\n                                    if(this.menu_selection !== null){\r\n                                        this.adminAction(this.menu_selection)\r\n                                    }\r\n                                })\r\n                            })\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    fetchAvailableNodes = () => {\r\n        return new Promise(resolve => {\r\n            AdminHandlerService.fetchAvailableNodesFromAPI(this.userData[\"jwt\"]).then(response => {\r\n                if(response.code === 1){\r\n                    this.setState({availableNodes : response.content})\r\n                    resolve(null)\r\n                }\r\n                else{\r\n                    this.setState({error_status : {code : response.code, message : response.content}})\r\n                    if(response.code === 401 || response.code === 402){\r\n                        resolve(undefined)\r\n                    }\r\n                    else{\r\n                        resolve(null)\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    fetchUserType = () => {\r\n        return new Promise(resolve => {\r\n            try{\r\n                this.setState({userType : this.props.location.state.detail[\"user_type\"]})\r\n                resolve(null)\r\n            }\r\n            catch(e){\r\n                UsersHandlerService.getUserRole(this.userData[\"jwt\"]).then(response => {\r\n                    if(response.code === 1){\r\n                        this.setState({userType : response[\"content\"]})\r\n                        resolve(null)\r\n                    }\r\n                    else{\r\n                        this.setState({error_status : {code : response.code, message : response.content}})\r\n                        if(response.code === 401 || response.code === 402){\r\n                            resolve(undefined)\r\n                        }\r\n                        else{\r\n                            resolve(null)\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    checkForConnectedUser = () => {\r\n        this.userData = localStorage.getItem('user_data')\r\n        if(this.userData === null || this.userData === ''){\r\n            this.redirect(\"\")\r\n        }\r\n        else{\r\n            this.userData = JSON.parse(this.userData)\r\n        }\r\n    }\r\n\r\n    handleContentTable = (message) => {\r\n        if (message.body) {\r\n            let content = JSON.parse(message.body)\r\n            console.log(content)\r\n            if(content.length > 0){\r\n                this.setState({content : content})\r\n            }\r\n            else{\r\n                this.setState({content : undefined})\r\n            }\r\n        }\r\n    }\r\n\r\n    fetchFileVersions = (userid, filename) => {\r\n        AdminHandlerService.getFileVersions(this.userData[\"jwt\"], userid, filename).then(response => {\r\n            if(response.code === 1){\r\n                this.setState({file_versions : response.content})\r\n                document.getElementById(\"replication_nodes_div\").style.display = \"none\"\r\n                document.getElementById(\"versions_nodes_div\").style.display = \"block\"\r\n                document.getElementById(\"subject_filename\").innerHTML = filename\r\n            }\r\n            else{\r\n                this.setState({error_status : {code : response.code, message : response.content}})\r\n            }\r\n        })\r\n    }\r\n\r\n    handleReplicationManagerStatus = (message) => {\r\n        if (message.body) {\r\n            let content = JSON.parse(message.body)\r\n            console.log(content)\r\n            if(content.length > 0){\r\n                this.setState({replication_status : content})\r\n            }\r\n            else{\r\n                this.setState({replication_status : undefined})\r\n            }\r\n        }\r\n    }\r\n\r\n    handleConnectionTable = (message) => {\r\n        if (message.body) {\r\n            let content = JSON.parse(message.body)\r\n            let nodes_details = this.state.connectionTable.status\r\n            let current_address = this.state.connectionTable.current_address\r\n            this.setState({connectionTable : {\"addresses\" : content, \"status\" : nodes_details, \"current_address\" : current_address}})\r\n        }\r\n    }\r\n\r\n    handleNodesActivity = (message) => {\r\n        if (message.body) {\r\n            let addresses = this.state.connectionTable.addresses\r\n            let current_address = this.state.connectionTable.current_address\r\n            this.setState({connectionTable : {\"addresses\" : addresses, \"status\" : JSON.parse(message.body), \"current_address\" : current_address}})\r\n        }\r\n    }\r\n\r\n    handleStorageStatus = (message) => {\r\n        if (message.body) {\r\n            let storage_status = {}\r\n            let first_address = this.state.current_address\r\n            let content = JSON.parse(message.body)\r\n            if(content.length > 0){\r\n                content.forEach(register => {\r\n                    register.nodesAddresses.forEach(address => {\r\n                        if(first_address === null){\r\n                            first_address = address\r\n                        }\r\n                        let node_registers = []\r\n                        if(Object.keys(storage_status).includes(address)){\r\n                            node_registers = storage_status[address]\r\n                        }\r\n                        node_registers.push(register)\r\n                        storage_status[address] = node_registers\r\n                    })\r\n                })\r\n                this.setState({storagestatus : storage_status, current_address : first_address})\r\n            }\r\n            else{\r\n                this.setState({storagestatus : undefined, current_address : null})\r\n            }\r\n        }\r\n    }\r\n\r\n    adminAction = (actionName) => {\r\n        if(this.state.error_status.code !== 401 && this.state.error_status.code !== 402){\r\n            this.menu_selection = actionName\r\n            let views = [\"admin_log_view\", \"admin_content_view\", \"admin_nodes_view\",\r\n                \"admin_replication_view\", \"admin_storagestatus_view\"    \r\n            ]\r\n\r\n            views.forEach(view => {\r\n                document.getElementById(view).style.display = \"none\"\r\n            })\r\n\r\n            if(this.state.websocket.connected === true && this.state.websocket.subscriptions !== undefined){\r\n                this.state.websocket.subscriptions.forEach(_ => _.unsubscribe())\r\n            }\r\n\r\n        let current_topic = []\r\n        let handleFunction = []\r\n        switch(actionName){\r\n            case \"log\":{\r\n                document.getElementById(\"admin_log_view\").style.display = \"block\"\r\n                document.getElementById(\"admin_title\").innerHTML = \"Log Data\"\r\n                this.fetchLogByCriteriaUpdate(null, null)\r\n                break;\r\n            }\r\n            case \"content\":{\r\n                document.getElementById(\"admin_content_view\").style.display = \"block\"\r\n                document.getElementById(\"admin_title\").innerHTML = \"Content Table\"\r\n                current_topic = [\"/topic/content\"]\r\n                handleFunction = [this.handleContentTable]\r\n                break;\r\n            }\r\n            case \"storage\":{\r\n                document.getElementById(\"admin_storagestatus_view\").style.display = \"block\"\r\n                document.getElementById(\"admin_title\").innerHTML = \"Storage Status Table\"\r\n                current_topic = [\"/topic/storage\"]\r\n                handleFunction = [this.handleStorageStatus]\r\n                break;\r\n            }\r\n            case \"nodes\":{\r\n                document.getElementById(\"admin_nodes_view\").style.display = \"block\"\r\n                document.getElementById(\"admin_title\").innerHTML = \"Nodes Status Table\"\r\n                current_topic = [\"/topic/nodes\", \"/topic/connection\"]\r\n                handleFunction = [this.handleNodesActivity, this.handleConnectionTable]\r\n                break;\r\n            }\r\n            case \"replication\":{\r\n                document.getElementById(\"admin_replication_view\").style.display = \"block\"\r\n                document.getElementById(\"admin_title\").innerHTML = \"Replication Status\"\r\n                current_topic = [\"/topic/replication\"]\r\n                handleFunction = [this.handleReplicationManagerStatus]\r\n                break;\r\n            }\r\n            default : break;\r\n        }\r\n        if(this.state.websocket.connected === true){\r\n            let subscriptions = []\r\n            let index = 0;\r\n            current_topic.forEach(topic => {\r\n                let func = handleFunction[index]\r\n                subscriptions.push(this.webSocketConnection.subscribe(topic, (msg) => func(msg)))\r\n                index += 1\r\n            })\r\n            this.setState({websocket : {\"connected\" : true, \"subscriptions\" : subscriptions}})\r\n        }\r\n    }\r\n    }\r\n\r\n    fetchLogByCriteriaUpdate = (criteria, updatevalue) => {\r\n        if(criteria !== null && updatevalue !== null){\r\n            this.logCriteria[criteria] = updatevalue\r\n        }\r\n        AdminHandlerService.fetchLog(this.userData[\"jwt\"], this.logCriteria).then(response => {\r\n            if(response.code === 1){\r\n                this.setState({log : response.content})\r\n            }\r\n            else{\r\n                this.setState({log : []})\r\n            }\r\n        })\r\n    }\r\n\r\n    cleanLog = () =>{\r\n        AdminHandlerService.cleanLog(this.userData[\"jwt\"], this.logCriteria).then(response => {\r\n            if(response.code === 1){\r\n                this.fetchLogByCriteriaUpdate(null, null)\r\n            }\r\n            else{\r\n                this.setState({error_status : {code : response.code, message : response.content}})\r\n            }\r\n        })\r\n    }\r\n\r\n    fetchReplicationNodesForFile = (userId, filename) => {\r\n        this.setState({content_nodes_data : []})\r\n        AdminHandlerService.fetchNodesStoringFile(this.userData[\"jwt\"], userId, filename).then(response => {\r\n            if(response.code === 1){\r\n                document.getElementById(\"replication_nodes_div\").style.display = \"block\"\r\n                document.getElementById(\"versions_nodes_div\").style.display = \"none\"\r\n                document.getElementById(\"subject_filename\").innerHTML = filename\r\n                response.content.forEach(address => {\r\n                    AdminHandlerService.fetchNodeData(this.userData[\"jwt\"], address).then(response => {\r\n                        if(response.code === 1){\r\n                            let content_nodes = this.state.content_nodes_data\r\n                            content_nodes.push(response.content)\r\n                            this.setState({content_nodes_data : content_nodes})\r\n                        }\r\n                        else{\r\n                            this.setState({error_status : {code : response.code, message : response.content}})\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n            else{\r\n                this.setState({error_status : {code : response.code, message : response.content}})\r\n            }\r\n        })\r\n    }\r\n\r\n    deleteFileFromInternalNode = () => {\r\n        AdminHandlerService.deleteFileFromInternalNode(this.userData[\"jwt\"], this.selectedFile).then(response => {\r\n            if(response.code === 1){\r\n                document.getElementById(\"storagestatus_delete_status\").style.visibility = \"visible\"\r\n            }\r\n            else{\r\n                this.setState({error_status : {code : response.code, message : response.content}})\r\n            }\r\n        })\r\n    }\r\n\r\n    redirect = (destination) => {\r\n        if(destination !== \"\"){\r\n            this.props.history.push(destination)\r\n        }\r\n        else{\r\n            this.props.history.push(\"/\")\r\n        }\r\n    }\r\n\r\n    render(){\r\n        var replicationNodesForFile = []\r\n        var versionForFile = []\r\n        var availableNodesSelect = []\r\n        var logData = []\r\n        var content = []\r\n        var storagestatus_nodes = {addresses : [], files : [], additional_data : []}\r\n        var nodes_status = {addresses : [], status : []}\r\n        var replication_status = []\r\n        if(this.state.userType !== null && this.state.code !== 402){\r\n            if(this.state.availableNodes != null){\r\n                this.state.availableNodes.forEach(node => {\r\n                    availableNodesSelect.push(<option key={`optionkey_${node[\"ip_address\"]}`} value={node[\"ip_address\"]}>{node[\"ip_address\"]}</option>)\r\n                })\r\n            }\r\n            if(this.state.log !== null){\r\n                this.state.log.forEach(log_register => {\r\n                    logData.push(\r\n                        <tr key={`log_${log_register.registerId}`}>\r\n                            <td><p>{log_register.node_address}</p></td>\r\n                            <td><p>{log_register.message_type}</p></td>\r\n                            <td><p>{log_register.description}</p></td>\r\n                            <td><p>{GeneralPurposeService.getCurrentTimestamp(new Date(log_register.register_date))}</p></td>\r\n                        </tr>\r\n                    )\r\n                })\r\n            }\r\n            if(this.state.content !== null){\r\n                document.getElementById(\"admin_view_title_0\").style.visibility = \"hidden\"\r\n                if(this.state.content !== undefined){\r\n                    this.state.content.forEach(content_register => {\r\n                        content.push(\r\n                            <tr key={`content_${content_register.userId}_${content_register.filename}`}>\r\n                                <td><p>{content_register.userId}</p></td>\r\n                                <td><p>{content_register.filename}</p></td>\r\n                                <td>\r\n                                    {content_register.status === \"[DELETED]\"? <p>{content_register.versionNo}</p> : \r\n                                        <p><button className=\"a_redirector\"\r\n                                            style={{fontSize:\"120%\", textDecoration:\"underline\"}} \r\n                                            onClick={() => {\r\n                                                this.fetchFileVersions(content_register.userId, content_register.filename)\r\n                                            }}\r\n                                            onMouseOver={() => {\r\n                                                document.getElementById(\"admin_view_title_1\").style.visibility = \"visible\"\r\n                                                document.getElementById(\"admin_view_title_1\").innerHTML = \"Click to see the version of this file\"\r\n                                            }}\r\n                                            onMouseLeave={() => {\r\n                                                document.getElementById(\"admin_view_title_1\").style.visibility = \"hidden\"\r\n                                            }}\r\n                                            >{content_register.versionNo}</button>\r\n                                        </p>\r\n                                    }\r\n                                </td>\r\n                                <td><p>{content_register.crc.toString(16)}</p></td>\r\n                                <td><p>{GeneralPurposeService.getFileSizeUnit(content_register.fileSize)}</p></td>\r\n                                <td>\r\n                                    {content_register.status === \"[DELETED]\"? <p>{content_register.replication_factor}</p> : \r\n                                        <p><button className=\"a_redirector\"\r\n                                            style={{fontSize:\"120%\", textDecoration:\"underline\"}} \r\n                                            onClick={() => this.fetchReplicationNodesForFile(content_register.userId, content_register.filename)} \r\n                                            onMouseOver={() => {\r\n                                                document.getElementById(\"admin_view_title_1\").style.visibility = \"visible\"\r\n                                                document.getElementById(\"admin_view_title_1\").innerHTML = \"Click to see the nodes that store this file\"\r\n                                            }}\r\n                                            onMouseLeave={() => {document.getElementById(\"admin_view_title_1\").style.visibility = \"hidden\"}}\r\n                                            >{content_register.replication_factor}</button>\r\n                                        </p>\r\n                                    }\r\n                                </td>\r\n                                <td><p>{content_register.status}</p></td>\r\n                            </tr>\r\n                        )\r\n                    })\r\n                }\r\n            }\r\n            if(this.state.file_versions !== null){\r\n                this.state.file_versions.forEach(version => {\r\n                    versionForFile.push(\r\n                        <p className=\"admin_view_title\" style={{fontSize:\"90%\"}}>{version.version_no}. {version.version_desc} ({version.version_hash.toString(16)})</p>\r\n                    )\r\n                })\r\n            }\r\n            if(this.state.content_nodes_data !== null){\r\n                this.state.content_nodes_data.forEach(node => {\r\n                    replicationNodesForFile.push(\r\n                        <div>\r\n                            <p className=\"admin_view_title\" style={{fontSize:\"90%\"}}>{node.ip_address} from {node.location_country}</p>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            if(this.state.storagestatus !== null && this.state.storagestatus !== undefined){\r\n                replicationNodesForFile = []\r\n                storagestatus_nodes.addresses = []\r\n                Object.keys(this.state.storagestatus).forEach(address => {\r\n                    storagestatus_nodes.addresses.push(\r\n                        <button \r\n                            className=\"a_redirector\" \r\n                            href=\"#\"\r\n                            style={{marginTop:\"-15%\"}} \r\n                            onClick={() => { \r\n                                this.setState({current_address : address})\r\n                                document.getElementById(\"storage_additional_data\").style.visibility = \"hidden\"\r\n                                document.getElementById(\"storagestatus_delete_status\").style.visibility = \"hidden\"\r\n                                document.getElementById(\"subject_filename_1\").innerHTML = \"\"\r\n                            }}>{address}\r\n                        </button>\r\n                    )\r\n                })\r\n            }\r\n            if(this.state.current_address !== null && this.state.current_address !== undefined){\r\n                storagestatus_nodes.files = []\r\n                console.log(this.state.storagestatus[this.state.current_address])\r\n                this.state.storagestatus[this.state.current_address].forEach(file => {\r\n                    let indexOfAddress = file.nodesAddresses.indexOf(this.state.current_address)\r\n                    let another_nodes = []\r\n                    file.nodesAddresses.forEach(address => {\r\n                        if(address !== this.state.current_address){\r\n                            another_nodes.push(<p style={{display:\"block\", fontSize: \"80%\"}}>{address}</p>)\r\n                        }\r\n                    })\r\n                    storagestatus_nodes.files.push(\r\n                        <tr key={`storagestatus_${file.userId}_${file.filename}`}>\r\n                            <td><p>{file.userId}</p></td>\r\n                            <td>\r\n                                <p><button className=\"a_redirector\"\r\n                                    style={{fontSize:\"120%\", textDecoration:\"underline\"}} \r\n                                    onClick={() => {\r\n                                        document.getElementById(\"storagestatus_delete_status\").style.visibility = \"hidden\"\r\n                                        document.getElementById(\"storage_additional_data\").style.visibility = \"visible\"\r\n                                        document.getElementById(\"subject_filename_1\").innerHTML = file.filename\r\n                                        this.selectedFile = {\"user\" : file.userId, \"filename\" : file.filename, \"address\" : this.state.current_address}\r\n                                    }} \r\n                                    onMouseOver={() => {\r\n                                        document.getElementById(\"admin_view_title_11\").style.visibility = \"visible\"\r\n                                        document.getElementById(\"admin_view_title_11\").innerHTML = \"Click for more details about this file\"\r\n                                    }}\r\n                                    onMouseLeave={() => {\r\n                                        document.getElementById(\"admin_view_title_11\").style.visibility = \"hidden\"\r\n                                    }}\r\n                                    >{file.filename}</button>\r\n                                </p>\r\n                            </td>\r\n                            <td><p>{file.nodesVersions[indexOfAddress]}</p></td>\r\n                            <td><p>{file.nodesCRCs[indexOfAddress].toString(16)}</p></td>\r\n                            <td>{another_nodes}</td>\r\n                        </tr>\r\n                    )\r\n                })\r\n            }\r\n\r\n            if(this.state.connectionTable.addresses !== null){\r\n                nodes_status.addresses = []\r\n                let first_address = this.state.connectionTable.current_address\r\n                console.log(\"first_Address: \" + first_address)\r\n                this.state.connectionTable.addresses.forEach(address => {\r\n                    if(first_address === null || first_address === undefined){\r\n                        first_address = address;\r\n                        let addresses = this.state.connectionTable.addresses\r\n                        let status = this.state.connectionTable.status\r\n                        this.setState({connectionTable : {addresses : addresses, status : status, current_address : first_address}})\r\n                    }\r\n                    nodes_status.addresses.push(\r\n                        <button \r\n                            className=\"a_redirector\" \r\n                            href=\"#\"\r\n                            style={{marginTop:\"-10%\"}} \r\n                            onClick={() => {\r\n                                let addresses = this.state.connectionTable.addresses\r\n                                let status = this.state.connectionTable.status\r\n                                this.setState({connectionTable : {addresses : addresses, status : status, current_address : address}}) \r\n                            }}>{address}\r\n                        </button>\r\n                    )                    \r\n                })\r\n            }\r\n\r\n            if(this.state.connectionTable.current_address !== null && this.state.connectionTable.current_address !== undefined){\r\n                let warnings = 0\r\n                let errors = 0\r\n                let internal_log = this.state.log.filter(register => register.node_address === this.state.connectionTable.current_address)\r\n                internal_log.forEach(register => {\r\n                    if(register.message_type === \"WARNING\"){\r\n                        warnings += 1\r\n                    }\r\n                    if(register.message_type === \"ERROR\"){\r\n                        errors += 1\r\n                    }\r\n                })\r\n                nodes_status.status = []\r\n                nodes_status.status.push(<p className=\"admin_view_title\">The status of the internal node</p>)\r\n                nodes_status.status.push(<br/>)\r\n                nodes_status.status.push(<p className=\"admin_view_title\">{this.state.connectionTable.current_address}</p>)\r\n                nodes_status.status.push(<br/>)\r\n                nodes_status.status.push(<br/>)\r\n                if(this.state.availableNodes !== null){\r\n                    this.state.availableNodes.forEach(node => {\r\n                        if(node.ip_address === this.state.connectionTable.current_address){\r\n                            nodes_status.status.push(<p className=\"admin_view_title\">Location : {node.location_country}</p>)\r\n                            nodes_status.status.push(<br/>)\r\n                            nodes_status.status.push(<br/>)\r\n                        }\r\n                    })\r\n                }\r\n                if(this.state.connectionTable.status !== null){\r\n                    this.state.connectionTable.status.forEach(address => {\r\n                        if(address.ip_address === this.state.connectionTable.current_address){\r\n                                let used_storage  = GeneralPurposeService.getFileSizeUnit(address.used_storage)\r\n                            let total_storage = GeneralPurposeService.getFileSizeUnit(address.total_storage)\r\n                            let percent = address.used_storage / address.total_storage * 100\r\n                            percent = Math.round(percent * 100000) / 100000\r\n\r\n                            nodes_status.status.push(<p className=\"admin_view_title\">\r\n                                Used storage<br/><br/>\r\n                                {used_storage} / {total_storage}&nbsp;&nbsp;&nbsp;\r\n                                ({percent} %)\r\n                            </p>)\r\n                            nodes_status.status.push(<br/>)\r\n                            nodes_status.status.push(<br/>)\r\n                            used_storage = Math.ceil(address.used_storage / 1000)\r\n                            let available_storage = Math.ceil((address.total_storage - used_storage) / 1000)\r\n                            if(used_storage < available_storage * 0.005){\r\n                                used_storage = available_storage * 0.005 + used_storage\r\n                            }\r\n\r\n                            nodes_status.status.push(\r\n                                <PieChart\r\n                                    style={{width:\"20%\", height:\"20%\"}}\r\n                                    data={[\r\n                                        { title: 'Used Storage', value: used_storage, color: '#c84b31' },\r\n                                        { title: 'Available Storage', value: available_storage, color: '#1eae98' },\r\n                                    ]}\r\n                                />\r\n                            )\r\n                        }\r\n                    })\r\n                }\r\n                nodes_status.status.push(<br/>)\r\n                nodes_status.status.push(<br/>)\r\n                nodes_status.status.push(<p className=\"admin_view_title\">This node encountered {warnings} warnings and {errors} errors.</p>)\r\n                nodes_status.status.push(<br/>)\r\n                nodes_status.status.push(<br/>)\r\n            }\r\n            if(this.state.replication_status !== null && this.state.replication_status !== undefined){\r\n                replication_status = []\r\n                this.state.replication_status.forEach(status => {\r\n                    replication_status.push(<p className=\"admin_view_title\">{status}</p>)\r\n                    replication_status.push(<br/>)\r\n                })\r\n            }\r\n        }\r\n        return(\r\n            <div className=\"App\">\r\n                <div className=\"Home\">\r\n                    <div className=\"home_header\">\r\n                        <p id=\"admin_title\">Admin console</p><br/>\r\n                        <hr style={{width:\"90%\"}}/>\r\n                        <br/>\r\n                    </div>\r\n                    {this.state.error_status.code === 401 || this.state.error_status.code === 402 ?\r\n                        <div>\r\n                            <p className=\"admin_view_title\" style={{fontSize:\"100%\"}}>{this.state.error_status.message}</p>\r\n                            <br/><br/>\r\n                            <button style={{marginTop:\"-1%\", marginBottom:\"2%\", fontSize:\"80%\"}} onClick={() => {\r\n                                localStorage.setItem(\"user_data\", '')\r\n                                this.redirect(\"/\")\r\n                            }}>Go to login page</button>\r\n                        </div>:\r\n                        <div>\r\n                            <div id=\"admin_log_view\" className=\"admin_div_view\">\r\n                                <p className=\"admin_view_title\">Message type</p>\r\n                                <select onChange={(event) => {this.fetchLogByCriteriaUpdate(\"message_type\",event.target.value)}}>\r\n                                    <option value=\"ALL\">ALL</option>\r\n                                    <option value=\"SUCCESS\">SUCCESS</option>\r\n                                    <option value=\"WARNING\">WARNING</option>\r\n                                    <option value=\"ERROR\">ERROR</option>\r\n                                </select>\r\n                                <p className=\"admin_view_title\">Source node</p>\r\n                                <select onChange={(event) => {this.fetchLogByCriteriaUpdate(\"node_address\",event.target.value)}}>\r\n                                    <option value=\"ALL\">ALL</option>\r\n                                    {availableNodesSelect}\r\n                                </select>\r\n                                <button onClick={() => this.fetchLogByCriteriaUpdate(null, null)}>&#x27F3;</button><br/><br/>\r\n                                <button style={{marginTop:\"-1%\", marginBottom:\"2%\"}}onClick={() => this.cleanLog()}>Clean log with given criteria</button>\r\n                                <br/>\r\n                                {this.state.log === null ? <p className=\"admin_view_title\">Fetching log data...</p> : \r\n                                    this.state.log.length === 0 ? \r\n                                        <p className=\"admin_view_title\">No log register found!</p> : \r\n                                        <div>\r\n                                            <p className=\"admin_view_title\" id=\"log_registers_count\">Found {this.state.log.length} log registers.</p>\r\n                                            <table>\r\n                                                <thead>\r\n                                                    <tr>\r\n                                                        <td>Address</td>\r\n                                                        <td>Message type</td>\r\n                                                        <td>Message</td>\r\n                                                        <td>Timestamp</td>\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    {logData}\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </div>\r\n                                }\r\n                            </div>\r\n                            <div id=\"admin_content_view\" className=\"admin_div_view\">\r\n                                {this.state.websocket.connected === false ? \r\n                                <p className=\"admin_view_title\">Initializing the connection ...<br/><br/></p> : \r\n                                <p id=\"admin_view_title_0\" className=\"admin_view_title\">Fetching content...<br/><br/></p>}\r\n                                <br/>\r\n                                {this.state.content === null ? <p></p> : \r\n                                    this.state.content === undefined ? \r\n                                        this.state.error_status.code === 0 ? <p className=\"admin_view_title\">{this.state.error_status.message}</p> :\r\n                                        <div style={{width:\"100%\"}}>\r\n                                            <img style={{maxHeight:\"350px\", maxWidth:\"350px\"}} src= \"/images/not_found.png\" />\r\n                                            <br/><br/><br/>\r\n                                            <p className=\"admin_view_title\">No register found in the Content Table!</p>\r\n                                            <br/>\r\n                                        </div> : \r\n                                        <div className=\"content_div\" id=\"contentDiv\">\r\n                                            <table id=\"content_table\">\r\n                                                <thead>\r\n                                                    <tr>\r\n                                                        <th>User ID</th>\r\n                                                        <th>Filename</th>\r\n                                                        <th>Version No</th>\r\n                                                        <th>Hash</th>\r\n                                                        <th>Filesize</th>\r\n                                                        <th>Replicas</th>\r\n                                                        <th>Status</th>\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    {content}\r\n                                                </tbody>\r\n                                            </table>\r\n                                            <div id=\"content_table_additional_data\">\r\n                                                <p className=\"admin_view_title\">Content Status Table</p><br/>\r\n                                                <p id=\"admin_view_title_1\" className=\"admin_view_title\">&nbsp;</p><br/>\r\n                                                <hr/><br/>\r\n                                                <p className=\"admin_view_title\" \r\n                                                    id=\"subject_filename\">\r\n                                                </p><br/>\r\n                                                <div id=\"replication_nodes_div\">{replicationNodesForFile}</div>\r\n                                                <div id=\"versions_nodes_div\">{versionForFile}</div>\r\n                                            </div>\r\n                                        </div>\r\n                                }\r\n                            </div>\r\n                            <div id=\"admin_storagestatus_view\" className=\"admin_div_view\">\r\n                                {this.state.websocket.connected === false ? <p className=\"admin_view_title\">Initializing the connection ...<br/><br/></p> : \r\n                                    this.state.storagestatus === null ? \r\n                                        <p className=\"admin_view_title\">Fetching internal nodes storage status...</p> : \r\n                                        this.state.storagestatus === undefined ? \r\n                                            this.state.error_status.code === 0 ? <p className=\"admin_view_title\">{this.state.error_status.message}</p> :\r\n                                            <div style={{width:\"100%\"}}>\r\n                                                <br/><br/><br/><br/>\r\n                                                <img style={{maxHeight:\"350px\", maxWidth:\"350px\"}} src= \"/images/not_found.png\" />\r\n                                                <br/><br/><br/>\r\n                                                <p className=\"admin_view_title\">No register found in the Storage Status Table!</p>\r\n                                                <br/>\r\n                                            </div>:\r\n                                        <div>\r\n                                            {storagestatus_nodes.addresses}\r\n                                            <br/><br/>\r\n                                            <div className=\"content_div\" id=\"storageDiv\">\r\n                                                <table id=\"content_table\">\r\n                                                    <thead>\r\n                                                        <tr>\r\n                                                            <th>User ID</th>\r\n                                                            <th>Filename</th>\r\n                                                            <th>Version No</th>\r\n                                                            <th>Hash</th>\r\n                                                            <th>Another nodes</th>\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {storagestatus_nodes.files}\r\n                                                    </tbody>\r\n                                                </table>\r\n                                                <div id=\"content_table_additional_data\">\r\n                                                    <p className=\"admin_view_title\">Storage Status Table</p><br/>\r\n                                                    <p id=\"admin_view_title_11\" className=\"admin_view_title\">&nbsp;</p><br/>\r\n                                                    <hr/>\r\n                                                    <p className=\"admin_view_title\" \r\n                                                        id=\"subject_filename_1\">\r\n                                                    </p><br/>\r\n                                                    <div id=\"storage_additional_data\" style={{visibility:\"hidden\"}}>\r\n                                                        <p className=\"admin_view_title\">Delete this file from this node.<br/>This will trigger a replication to another node.</p>\r\n                                                        <br/><button className=\"redirector\" onClick={this.deleteFileFromInternalNode}>Delete</button>\r\n                                                        <p className=\"admin_view_title\" id=\"storagestatus_delete_status\" style={{visibility : \"hidden\"}}>\r\n                                                            File successfully deleted from node.<br/>\r\n                                                            The change will be visible at the next update from General Manager<br/>\r\n                                                            You can also check the Replication Manager to see the workaround.\r\n                                                        </p>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                }\r\n                            </div>\r\n                            <div id=\"admin_nodes_view\" className=\"admin_div_view\">\r\n                            {this.state.websocket.connected === false ? <p className=\"admin_view_title\">Initializing the connection ...<br/><br/></p> : \r\n                                this.state.connectionTable.addresses === null ? \r\n                                    <p className=\"admin_view_title\">Fetching internal nodes status...</p> : \r\n                                    this.state.connectionTable.addresses === undefined && this.state.error_status.code === 0? \r\n                                        <p className=\"admin_view_title\">{this.state.error_status.message}</p> :\r\n                                            this.state.connectionTable.addresses === [] ? \r\n                                                <p className=\"admin_view_title\">No internal node found!</p> :\r\n                                                <div>\r\n                                                    {nodes_status.addresses}\r\n                                                    <br/><br/>\r\n                                                    <div className=\"node_status\">\r\n                                                        {nodes_status.status}\r\n                                                     </div>\r\n                                                </div>\r\n                            }\r\n                            </div>\r\n                            <div id=\"admin_replication_view\" className=\"admin_div_view\">\r\n                            {this.state.websocket.connected === false ? <p className=\"admin_view_title\">Initializing the connection ...<br/><br/></p> : \r\n                                this.state.replication_status === null ? \r\n                                    <p className=\"admin_view_title\">Fetching replication manager status...</p> : \r\n                                    this.state.replication_status === undefined ? \r\n                                        this.state.error_status.code === 0 ? <p className=\"admin_view_title\">{this.state.error_status.message}</p> :\r\n                                        <div style={{width:\"100%\"}}>\r\n                                            <br/><br/><br/><br/>\r\n                                            <img style={{maxHeight:\"350px\", maxWidth:\"350px\"}} src= \"/images/not_found.png\" />\r\n                                            <br/><br/><br/>\r\n                                            <p className=\"admin_view_title\">No register found in the Replication Manager Table!</p>\r\n                                            <br/>\r\n                                        </div> :\r\n                                    <div>\r\n                                        <div className=\"node_status\">\r\n                                            <p className=\"admin_view_title\">Replication Manager Status</p>\r\n                                            <br/><br/>\r\n                                            {replication_status}\r\n                                        </div>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                        </div>}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminMainPage;\r\n\r\n//https://developer.okta.com/blog/2018/09/25/spring-webflux-websockets-react\r\n//https://dev.to/fpeluso/a-simple-websocket-between-java-and-react-5c98\r\n//https://blog.cloudboost.io/simple-chat-react-java-6923b54d65a0\r\n\r\n// https://programming.vip/docs/four-ways-of-integrating-websocket-with-spring-boot.html","import React, { Component } from 'react';\r\n\r\nimport { FileHandlerService }    from '../services/FileHandlerService';\r\nimport { GeneralPurposeService } from '../services/GeneralPurposeService';\r\nimport {UsersHandlerService} from '../services/UsersHandlerService';\r\n\r\nimport '../styles/pages-style.css';\r\nimport '../styles/pages-home-style.css';\r\nimport '../styles/pages-upload.css';\r\n\r\nclass UploadPage extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        document.getElementById(\"page-name\").innerHTML = \"Upload Page\";\r\n        this.userData = JSON.parse(localStorage.getItem('user_data'))\r\n        console.log(this.userData)\r\n        this.descriptionData = null;\r\n        this.state = {\r\n            currentFile : null,\r\n            userType    : \"STANDARD\",\r\n            preview     : <p id=\"upload_data_preview\">No preview available</p>\r\n        }\r\n        this.fetchUserType().then(_ => {})\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        GeneralPurposeService.setHeaderLayout(\"USER\")\r\n        this.dragDropStyle(\"uploader\")\r\n    }\r\n\r\n    dragDropStyle = (div_name) => {\r\n        let dropArea = document.getElementById(div_name);\r\n\r\n        [\"dragover\", \"drop\"].forEach(event => {\r\n            dropArea.addEventListener(event, (e) => {e.preventDefault()}, false)\r\n        })\r\n\r\n        dropArea.addEventListener('dragover', () => {\r\n            document.getElementById(\"dropmessage\").innerHTML = \"Drop your file\"\r\n            dropArea.style.borderStyle = \"dashed\"\r\n        }, false)\r\n        dropArea.addEventListener('dragleave', () => {\r\n            document.getElementById(\"dropmessage\").innerHTML = \"\"\r\n            dropArea.style.borderStyle = \"solid\"\r\n        }, false)\r\n        dropArea.addEventListener('drop', this.handleDropFiles, false)\r\n    }\r\n\r\n    fetchUserType = () => {\r\n        return new Promise(resolve => {\r\n            try{\r\n                this.setState({userType : this.props.location.state.detail[\"user_type\"]})\r\n                resolve(null)\r\n            }\r\n            catch(e){\r\n                UsersHandlerService.getUserRole(this.userData[\"jwt\"]).then(response => {\r\n                    if(response.code === 1){\r\n                        console.log(`props fetch: ${response[\"content\"]}`)\r\n                        this.setState({userType : response[\"content\"]})\r\n                    }\r\n                    else if(response.code === 401){\r\n                        localStorage.setItem(\"user_data\", '')\r\n                    }\r\n                    resolve(null)\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    handleDropFiles = (e) => {\r\n        document.getElementById(\"upload_data\").style.display = \"block\"\r\n        document.getElementById(\"uploader\").style.display = \"none\"\r\n        document.getElementById(\"dropmessage\").innerHTML = \"\"\r\n        document.getElementById(\"uploader\").style.borderStyle = \"solid\"\r\n\r\n        let dt = e.dataTransfer\r\n        let file = dt.files[0]\r\n      \r\n        document.getElementById(\"upload_date_filename\").innerHTML = file.name\r\n        document.getElementById(\"upload_date_filesize\").innerHTML = `Size : ${Math.round(file.size / 1024 * 100) / 100} KB`\r\n        document.getElementById(\"upload_date_timedate_last_modified\").innerHTML = `Last modified : ${GeneralPurposeService.getCurrentTimestamp(file.lastModifiedDate)}`\r\n        document.getElementById(\"upload_date_timedate\").innerHTML = `Upload data : ${GeneralPurposeService.getCurrentTimestamp(new Date())}`\r\n\r\n        let fileType = GeneralPurposeService.getFileType(file.name)\r\n        if(fileType === \"image\"){\r\n            this.setState({preview : <embed id=\"upload_data_preview\" type=\"image/jpg\" src={URL.createObjectURL(file)}/>})\r\n        }\r\n        else if(fileType === \"text\"){\r\n            this.setState({preview : <iframe title={file.name} id=\"upload_data_preview\" src={URL.createObjectURL(file)} alt=\"No preview available\"></iframe>})\r\n        }\r\n        else{\r\n            this.setState({preview : <p id=\"upload_data_preview\">No preview avaialble!</p>})\r\n        }\r\n\r\n        this.setState({currentFile : file})\r\n    }\r\n\r\n    uploadFile = () => {\r\n        document.getElementById(\"dropmessage_1\").innerHTML = \"Uploading file...\"\r\n        FileHandlerService.uploadFile(this.state.currentFile, this.userData[\"jwt\"], this.descriptionData, this.state.userType).then(response => {\r\n            if(response.code === 1){\r\n                document.getElementById(\"dropmessage_1\").innerHTML = response.content\r\n                document.getElementById(\"extra\").innerHTML = \"Your file will be available in a few seconds...\"\r\n            }\r\n            else if(response.code === 401){\r\n                document.getElementById(\"dropmessage_1\").innerHTML = response\r\n                console.log(`eroare : ${response}`)\r\n            }\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"App\">\r\n                <div className=\"Home\">\r\n                    <div className=\"upload_header\">\r\n                        <p>Upload new file</p>\r\n                    </div>\r\n                    <hr/>\r\n                    <div className=\"upload_body\">\r\n                        <div className=\"upload_div\" id=\"uploader\">\r\n                            <p>Select a file or drop it here</p>\r\n                            <br/>\r\n                            <p id=\"dropmessage\"></p>\r\n                        </div>\r\n                        <div className=\"upload_div\" id=\"upload_data\">\r\n                            <p id=\"upload_date_filename\"></p>\r\n                            <br/>\r\n                            {this.state.preview}<br/>\r\n                            <p className=\"upload_data_details\" id=\"upload_date_filesize\"></p><br/>\r\n                            <p className=\"upload_data_details\" id=\"upload_date_timedate_last_modified\"></p><br/>\r\n                            <p className=\"upload_data_details\" id=\"upload_date_timedate\"></p><br/>\r\n                            <input type=\"text\" placeholder=\"Upload description\"\r\n                                onChange={(event) => {this.descriptionData = event.target.value}}/>\r\n                            <br/>\r\n                            <button className=\"upload_btn\" onClick={this.uploadFile}>Upload</button><br/>\r\n                            <button className=\"a_redirector\" id=\"selector_storage_status\" href=\"#\" onClick={() => {\r\n                                    document.getElementById(\"upload_data\").style.display = \"none\"\r\n                                    document.getElementById(\"uploader\").style.display = \"block\"\r\n                                }}>Upload another file</button><br/>\r\n                            <p id=\"dropmessage_1\"></p>\r\n                            <br style={{height:\"50%\"}}/>\r\n                            <p style={{marginTop:\"-5px\"}} id=\"extra\"></p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default UploadPage;\r\n","import React, { Component }  from 'react';\r\nimport {UsersHandlerService} from '../services/UsersHandlerService';\r\n\r\nimport { FileHandlerService }    from '../services/FileHandlerService';\r\nimport { GeneralPurposeService } from '../services/GeneralPurposeService';\r\n\r\nimport '../styles/pages-style.css';\r\nimport '../styles/pages_usermain.css';\r\nimport '../styles/pages-home-style.css';\r\n\r\nclass FileDetailsPage extends Component {\r\n    static userActions = [\"download\", \"delete\", \"rename\", \"update\", \"no-selected\"]\r\n\r\n    constructor(props){\r\n        super(props)\r\n        document.getElementById(\"page-name\").innerHTML = \"Home Page\";\r\n        this.userData = localStorage.getItem('user_data')\r\n        this.description = null\r\n        this.newname     = null\r\n        this.fileSuccessfullyDownloaded = false\r\n        this.state = {\r\n            isUserConnected            : false,\r\n            userType                   : null,\r\n            accountAvailable           : true,\r\n            accountSuccessfullyCreated : false,\r\n            currentFileName            : null,\r\n            availableNodes             : null,\r\n            fileDetails                : null,\r\n            userFile                   : null,\r\n            filePreview                : <p>No preview avaialble!</p>,\r\n            currentSelectedAction      : FileDetailsPage.userActions[4]\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        GeneralPurposeService.setHeaderLayout(\"USER\")\r\n        this.checkForConnectedUser()\r\n        this.fetchUserType().then(_ => {\r\n            let userFile = JSON.parse(localStorage.getItem('userfile'))\r\n            if(userFile !== null){\r\n                document.getElementById(\"p_filename\").innerHTML = userFile.filename\r\n                this.fileDetails(userFile)\r\n                this.setState({userFile : userFile})\r\n            }\r\n        })\r\n    }\r\n\r\n    componentDidUpdate = () => {\r\n        if(this.state.currentSelectedAction !== FileDetailsPage.userActions[4]){\r\n            FileDetailsPage.userActions.forEach(action => {\r\n                if(action !== FileDetailsPage.userActions[4]){\r\n                    document.getElementById(`selector_${action}`).style.borderBottom = \r\n                        (action === this.state.currentSelectedAction) ? \"3px solid #23049d\" : \"none\";\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    fetchUserType = () => {\r\n        return new Promise(resolve => {\r\n            try{\r\n                this.setState({userType : this.props.location.state.detail[\"user_type\"]})\r\n                resolve(null)\r\n            }\r\n            catch(e){\r\n                UsersHandlerService.getUserRole(this.userData[\"jwt\"]).then(response => {\r\n                    if(response.code === 1){\r\n                        console.log(`props fetch: ${response[\"content\"]}`)\r\n                        this.setState({userType : response[\"content\"]})\r\n                    }\r\n                    else if(response.code === 401){\r\n                        localStorage.setItem(\"user_data\", '')\r\n                    }\r\n                    resolve(null)\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    checkForConnectedUser = () => {\r\n        this.userData = localStorage.getItem('user_data')\r\n        if(this.userData === null || this.userData === ''){\r\n            this.redirect(\"\")\r\n        }\r\n        else{\r\n            this.userData = JSON.parse(this.userData)\r\n        }\r\n    }\r\n\r\n    redirect = (destination) => {\r\n        if(destination !== \"\"){\r\n            this.props.history.push(destination)\r\n        }\r\n        else{\r\n            this.props.history.push(\"/\")\r\n        }\r\n    }\r\n\r\n    fileDetails = (file) => {\r\n        FileHandlerService.getFileHistory(this.userData[\"jwt\"], file.filename).then(response => {\r\n            this.setState({fileDetails : response.content, currentFileName : file.filename}, () => {this.downloadFile()})\r\n        })\r\n    }\r\n\r\n    downloadFile = () => {\r\n        if(this.fileSuccessfullyDownloaded === true){\r\n            document.getElementById(\"file_status\").innerHTML = \"Downloading file...\"\r\n            document.getElementById(\"downloaduri\").click()\r\n            document.getElementById(\"file_status\").innerHTML = \"File successfully downloaded!\"\r\n        }\r\n        else{\r\n            FileHandlerService.downloadFile(this.userData[\"jwt\"], this.state.currentFileName).then(response => {\r\n                document.getElementById(\"downloaduri\").href = response.content\r\n                let fileType = GeneralPurposeService.getFileType(this.state.currentFileName)\r\n                if(fileType === \"image\"){\r\n                    this.setState({filePreview : <embed type=\"image/jpg\" src={response.content}/>})\r\n                }\r\n                else if(fileType === \"text\"){\r\n                    this.setState({filePreview : <iframe title={this.state.currentFileName} src={response.content} alt=\"No preview available\"></iframe>})\r\n                }\r\n                else{\r\n                    this.setState({filePreview : <p>No preview avaialble!</p>})\r\n                } \r\n                this.fileSuccessfullyDownloaded = true\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteFile = () => {\r\n        document.getElementById(\"file_status_delete\").innerHTML = \"Deleting file...\"\r\n        document.getElementById(\"delete_file_button\").style.visibility = \"hidden\"\r\n        FileHandlerService.deleteFile(this.userData[\"jwt\"], this.state.currentFileName, this.description).then(response => {\r\n            if(response.code === 1){\r\n                let global_count = 3;\r\n                let handler = this\r\n                document.getElementById(\"file_status_delete\").innerHTML = \"File successfully deleted!\"\r\n                let interval = setInterval(function(){ \r\n                    document.getElementById(\"delete_extra\").innerHTML = \"You will be redirected to main page in \" + global_count + \"...\"\r\n                    global_count -= 1\r\n                    if(global_count === -1){\r\n                        clearInterval(interval)\r\n                        handler.redirect(\"\")\r\n                    }\r\n                }, 1000);\r\n                //document.getElementById(\"delete_file_button\").style.visibility = \"visible\"\r\n                //document.getElementById(\"delete_file_button\").innerHTML = \"Go to my files\"\r\n                document.getElementById(\"delete_file_button\").onclick = () => this.redirect(\"\")\r\n            }\r\n            else{\r\n                document.getElementById(\"file_status_delete\").innerHTML = \"Your file cannot be deleted.\"\r\n            }\r\n        })\r\n    }\r\n\r\n    fileDetailsAfterRename = (newFileName) => {\r\n        FileHandlerService.getFileHistory(this.userData[\"jwt\"], newFileName).then(response => {\r\n            if(response.code === 0){\r\n                let handler = this\r\n                setTimeout(function(){\r\n                    handler.fileDetailsAfterRename(newFileName)\r\n                }, 500)\r\n            }\r\n            else{\r\n                this.fileSuccessfullyDownloaded = false\r\n                this.setState({fileDetails : response.content, currentFileName : newFileName}, () => {this.downloadFile()})\r\n            }\r\n        })\r\n    }\r\n\r\n    renameFile = () => {\r\n        if(this.newname === null || this.newname === \"\"){\r\n            document.getElementById(\"file_status_rename_1\").innerHTML = \"Please provide a valid filename!\"\r\n        }\r\n        else if(GeneralPurposeService.getFileExtension(this.newname) !== GeneralPurposeService.getFileExtension(this.state.currentFileName)){\r\n            document.getElementById(\"file_status_rename_1\").innerHTML = \"You are trying to change the file type ? <br/> This is now allowed\"\r\n        }\r\n        else if(this.description === null || this.description === \"\"){\r\n            document.getElementById(\"file_status_rename_1\").innerHTML = \"Please provide a valid description!\"\r\n        }\r\n        else{\r\n            FileHandlerService.renameFile(this.userData[\"jwt\"], this.state.currentFileName, this.newname, this.description).then(response => {\r\n                if(response.code === 1){\r\n                    document.getElementById(\"file_status_rename_1\").innerHTML = \"File successfully renamed.\"\r\n                    document.getElementById(\"p_filename\").innerHTML = this.newname;\r\n                    let userFile = this.state.userFile\r\n                    userFile.filename = this.newname\r\n                    localStorage.setItem(\"userfile\", JSON.stringify(userFile))\r\n                    this.state.currentFileName = this.newname\r\n                    this.setState({userFile : userFile}, () => {\r\n                        this.fileDetailsAfterRename(this.newname)   \r\n                    })\r\n                    \r\n                }\r\n                else{\r\n                    document.getElementById(\"file_status_rename_1\").innerHTML = \"File cannot be renamed.\"\r\n                }\r\n\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    updateAction = (actionIndex) => {\r\n        document.getElementById(\"download_action\").style.display = \"none\"\r\n        document.getElementById(\"delete_action\").style.display   = \"none\"\r\n        document.getElementById(\"rename_action\").style.display   = \"none\"\r\n        document.getElementById(\"update_action\").style.display   = \"none\"\r\n\r\n        document.getElementById(`${FileDetailsPage.userActions[actionIndex]}_action`).style.display = \"block\"\r\n        this.setState({currentSelectedAction: FileDetailsPage.userActions[actionIndex]})\r\n    }\r\n\r\n    render(){\r\n        var fileDetails = []\r\n        if(this.state.userType !== null){\r\n            if(this.state.fileDetails !== null){\r\n                this.state.fileDetails.forEach(detail => {\r\n                    console.log(detail)\r\n                    fileDetails.push(\r\n                        <div className=\"details_history\">\r\n                            <label>{detail.version_no} : {detail.version_hash.toString(16)}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{detail.version_desc}</label><br/><br/>\r\n                            <label>{detail.version_timestamp}</label><br/><br/><br/>\r\n                        </div>)\r\n                    fileDetails.push(<br/>)\r\n                })\r\n            }\r\n        }\r\n        return(\r\n            <div className=\"App\">\r\n                <div className=\"Home\">\r\n                    <div>\r\n                        <div className=\"home_header\" id=\"home_header_details\">\r\n                            <p id=\"p_filename\" style={{width:\"100%\",textAlign:\"center\"}}></p>\r\n                        </div>\r\n                        <hr id=\"mainpage_hr\"/>\r\n                        <br/><br/>\r\n                        <div className = \"home_body_main_div\">\r\n                            <div id=\"file_versions\">\r\n                                {this.state.userFile !== null ? \r\n                                    <div>\r\n                                        <p>Details</p>\r\n                                        <hr style={{width:\"50%\", marginBottom:\"10%\"}}/>\r\n                                        <div>\r\n                                            <label>Hash : {this.state.userFile.hash.toString(16)}</label><br/><br/>\r\n                                            <label>Size : {GeneralPurposeService.getFileSizeUnit(this.state.userFile.filesize)}</label><br/><br/>\r\n                                            <label>Version : {this.state.userFile.version}</label><br/>\r\n                                        </div>\r\n                                        <br/><br/>\r\n                                        <p>History</p>\r\n                                        <hr style={{width:\"50%\", marginBottom:\"10%\"}}/>\r\n                                        {fileDetails}\r\n                                    </div> : <p></p>\r\n                                }\r\n                            </div>\r\n                            <div id=\"previews\">\r\n                                {this.state.filePreview}\r\n                            </div>\r\n                            <div id=\"file_details\">\r\n                                <p>Actions</p>\r\n                                <hr/>\r\n                                <button className=\"a_redirector\" id=\"selector_download\" style={{fontSize:\"90%\"}} \r\n                                    onClick={() => {\r\n                                        this.updateAction(0)\r\n                                        this.downloadFile()\r\n                                    }}>Download\r\n                                </button>\r\n                                <button className=\"a_redirector\" id=\"selector_delete\"  style={{fontSize:\"90%\"}} onClick={() => this.updateAction(1)}>Delete</button>\r\n                                <button className=\"a_redirector\" id=\"selector_rename\"  style={{fontSize:\"90%\"}} onClick={() => this.updateAction(2)}>Rename</button>\r\n                                <button className=\"a_redirector\" id=\"selector_update\"  style={{fontSize:\"90%\"}} onClick={() => this.updateAction(3)}>Update</button>\r\n                                <a id=\"downloaduri\" href=\"/\" download>&nbsp;</a><br/>\r\n                                <div className=\"action_div\" id=\"download_action\">\r\n                                    <p id=\"file_status\"></p>\r\n                                </div>\r\n                                <div className=\"action_div\" id=\"delete_action\">\r\n                                    <p id=\"file_status_delete\">The erasing procedure is irreversible.<br/> \r\n                                        Your files will be deleted permanently.<br/><br/>\r\n                                        Do you want to proceed ? \r\n                                    </p><br/>\r\n                                    <p id=\"delete_extra\"></p><br/>\r\n                                    <button id=\"delete_file_button\" style={{fontSize:\"80%\", padding : 0, paddingLeft:\"5px\", paddingRight:\"5px\", height:\"40px\"}} \r\n                                        onClick={() => this.deleteFile()}>Delete my file\r\n                                    </button>\r\n                                </div>\r\n                                <div className=\"action_div\" id=\"rename_action\">\r\n                                    <p id=\"file_status_rename\">Please provide the new file name<br/></p>\r\n                                    <input\r\n                                        onChange={(event) => {this.newname = event.target.value}} \r\n                                        type=\"text\" />\r\n                                    <br/>\r\n                                    <p id=\"file_status_rename\">Please also provide a description for your update<br/></p>\r\n                                    <input\r\n                                        onChange={(event) => {this.description = event.target.value}} \r\n                                        type=\"text\" /><br/><br/>\r\n                                    <button id=\"rename_file_button\" style={{fontSize:\"80%\", padding : 0, paddingLeft:\"5px\", paddingRight:\"5px\", height:\"40px\"}} \r\n                                        onClick={() => this.renameFile()}>Rename my file\r\n                                    </button>\r\n                                    <p id=\"file_status_rename_1\"><br/></p>\r\n\r\n                                    <br/><br/>\r\n                                </div>\r\n                                <div className=\"action_div\" id=\"update_action\">\r\n                                    <p id=\"file_status_update\">\r\n                                        Direct update of file is not supported yet<br/><br/>\r\n                                        Please update your file locally and upload it<br/>\r\n                                        Consider keeping the same name for file<br/><br/>\r\n                                        The new version will be registered<br/><br/>\r\n                                    </p>\r\n                                    <button id=\"rename_file_button\" style={{fontSize:\"80%\", padding : 0, paddingLeft:\"5px\", paddingRight:\"5px\", height:\"40px\"}} \r\n                                        onClick={() => this.redirect(\"/upload\")}>Go to upload page\r\n                                    </button>\r\n                                </div>\r\n                                <div className=\"request_description\">\r\n                                    <p id=\"input_label\">New name : </p>\r\n                                    <input\r\n                                        onChange={(event) => {this.newname = event.target.value}} \r\n                                        type=\"text\" />\r\n                                </div>\r\n                                <div className=\"request_description\">\r\n                                    <button className=\"file_button\" id=\"proceed_btn\" onClick={() => this.renameFile(1)}>Rename</button>\r\n                                </div>\r\n                                <br/>\r\n                                <p id=\"file_status\"></p>\r\n                            </div>\r\n                        </div>\r\n                    </div> \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FileDetailsPage;","import React                   from 'react';\nimport ReactDOM                from 'react-dom';\nimport { BrowserRouter, Route} from \"react-router-dom\";\n\nimport StartPage       from './pages/StartPage';\nimport ProfilePage     from './pages/ProfilePage';\nimport MainUserPage    from './pages/MainUserPage';\nimport AdminMainPage   from './pages/AdminMainPage';\nimport UploadPage      from './pages/UploadPage';\nimport FileDetailsPage from './pages/FileDetailsPage';\n\nimport './styles/index.css';\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <Route exact path=\"/\"        component={StartPage} />\n    <Route exact path=\"/profile\" component={ProfilePage} />\n    <Route exact path=\"/uhome\"   component={MainUserPage} />\n    <Route exact path=\"/ahome\"   component={AdminMainPage} />\n    <Route exact path=\"/upload\"  component={UploadPage}/>\n    <Route exact path=\"/details\" component={FileDetailsPage}/>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);"],"sourceRoot":""}